<asdoc build="asd3_0_b2_1">
   <link rel="stylesheet" href="style.css" type="text/css"/>
   <packages>
      <asPackage name="org.robotlegs.adapters">
         <classes>
            <asClass name="SwiftSuspendersInjector" type="class" fullname="org.robotlegs.adapters:SwiftSuspendersInjector" accessLevel="public" isFinal="false" isDynamic="false" packageName="org.robotlegs.adapters" path="" relativePath="../" href="" taghref="" inheritDoc="false">
               <description><![CDATA[
  SwiftSuspender <code>IInjector</code> adpater - See: <a href="http://github.com/tschneidereit/SwiftSuspenders">SwiftSuspenders</a>
    ]]></description>
               <shortDescription><![CDATA[
  SwiftSuspender <code>IInjector</code> adpater - See: <a href="http://github.com/tschneidereit/SwiftSuspenders">SwiftSuspenders</a>
    ]]></shortDescription>
               <versions/>
               <author>tschneidereit</author>
               <asAncestors>
                  <asAncestor>
                     <classRef name="org.swiftsuspenders.Injector" fullName="org.swiftsuspenders.Injector" relativePath="none"/>
                  </asAncestor>
               </asAncestors>
               <asImplements>
                  <asAncestor>
                     <classRef name="IInjector" fullName="org.robotlegs.core:IInjector" packageName="org.robotlegs.core" relativePath="../core/IInjector.html"/>
                     <methods>
                        <method name="createChild" fullname="org.robotlegs.core:IInjector/org.robotlegs.core:IInjector:createChild" accessLevel="public" result_type="org.robotlegs.core:IInjector" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Create an injector that inherits rules from its parent
   
   ]]></shortDescription>
                           <result type="org.robotlegs.core:IInjector">
                              <classRef name="IInjector" fullName="org.robotlegs.core:IInjector" packageName="org.robotlegs.core" relativePath="../core/IInjector.html"/>
                           </result>
                           <params>
                              <param name="applicationDomain" type="flash.system:ApplicationDomain" default="null"/>
                           </params>
                        </method>
                        <method name="getInstance" fullname="org.robotlegs.core:IInjector/org.robotlegs.core:IInjector:getInstance" accessLevel="public" result_type="*" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Create or retrieve an instance of the given class
   
   ]]></shortDescription>
                           <params>
                              <param name="clazz" type="Class"/>
                              <param name="named" type="String" default=""/>
                           </params>
                        </method>
                        <method name="hasMapping" fullname="org.robotlegs.core:IInjector/org.robotlegs.core:IInjector:hasMapping" accessLevel="public" result_type="Boolean" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Does a rule exist to satsify such a request?
   
   ]]></shortDescription>
                           <params>
                              <param name="clazz" type="Class"/>
                              <param name="named" type="String" default=""/>
                           </params>
                        </method>
                        <method name="injectInto" fullname="org.robotlegs.core:IInjector/org.robotlegs.core:IInjector:injectInto" accessLevel="public" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Perform an injection into an object, satisfying all it's dependencies
      <p>The <code>IInjector</code> should throw an <code>Error</code>
   if it can't satisfy all dependencies of the injectee.</p>
      ]]></shortDescription>
                           <params>
                              <param name="target" type="Object"/>
                           </params>
                        </method>
                        <method name="instantiate" fullname="org.robotlegs.core:IInjector/org.robotlegs.core:IInjector:instantiate" accessLevel="public" result_type="*" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Create an object of the given class, supplying its dependencies as constructor parameters
   if the used DI solution has support for constructor injection
      <p>Adapters for DI solutions that don't support constructor injection should just create a new
   instance and perform setter and/ or method injection on that.</p>
   
   <p>NOTE: This method will always create a new instance.]]></shortDescription>
                           <params>
                              <param name="clazz" type="Class"/>
                           </params>
                        </method>
                        <method name="mapClass" fullname="org.robotlegs.core:IInjector/org.robotlegs.core:IInjector:mapClass" accessLevel="public" result_type="*" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   When asked for an instance of the class <code>whenAskedFor</code>
   inject a new instance of <code>instantiateClass</code>.]]></shortDescription>
                           <params>
                              <param name="whenAskedFor" type="Class"/>
                              <param name="instantiateClass" type="Class"/>
                              <param name="named" type="String" default=""/>
                           </params>
                        </method>
                        <method name="mapRule" fullname="org.robotlegs.core:IInjector/org.robotlegs.core:IInjector:mapRule" accessLevel="public" result_type="*" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   When asked for an instance of the class <code>whenAskedFor</code>
   use rule <code>useRule</code> to determine the correct injection.]]></shortDescription>
                           <params>
                              <param name="whenAskedFor" type="Class"/>
                              <param name="useRule" type="String"/>
                              <param name="named" type="" default=""/>
                           </params>
                        </method>
                        <method name="mapSingleton" fullname="org.robotlegs.core:IInjector/org.robotlegs.core:IInjector:mapSingleton" accessLevel="public" result_type="*" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   When asked for an instance of the class <code>whenAskedFor</code>
   inject an instance of <code>whenAskedFor</code>.]]></shortDescription>
                           <params>
                              <param name="whenAskedFor" type="Class"/>
                              <param name="named" type="String" default=""/>
                           </params>
                        </method>
                        <method name="mapSingletonOf" fullname="org.robotlegs.core:IInjector/org.robotlegs.core:IInjector:mapSingletonOf" accessLevel="public" result_type="*" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   When asked for an instance of the class <code>whenAskedFor</code>
   inject an instance of <code>useSingletonOf</code>.]]></shortDescription>
                           <params>
                              <param name="whenAskedFor" type="Class"/>
                              <param name="useSingletonOf" type="Class"/>
                              <param name="named" type="String" default=""/>
                           </params>
                        </method>
                        <method name="mapValue" fullname="org.robotlegs.core:IInjector/org.robotlegs.core:IInjector:mapValue" accessLevel="public" result_type="*" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   When asked for an instance of the class <code>whenAskedFor</code>
   inject the instance <code>useValue</code>.]]></shortDescription>
                           <params>
                              <param name="whenAskedFor" type="Class"/>
                              <param name="useValue" type="Object"/>
                              <param name="named" type="String" default=""/>
                           </params>
                        </method>
                        <method name="unmap" fullname="org.robotlegs.core:IInjector/org.robotlegs.core:IInjector:unmap" accessLevel="public" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Remove a rule from the injector
      ]]></shortDescription>
                           <params>
                              <param name="clazz" type="Class"/>
                              <param name="named" type="String" default=""/>
                           </params>
                        </method>
                     </methods>
                  </asAncestor>
               </asImplements>
               <constructors>
                  <constructor name="SwiftSuspendersInjector" fullname="org.robotlegs.adapters:SwiftSuspendersInjector/SwiftSuspendersInjector" accessLevel="public" result_type="*" inheritDoc="false">
                     <versions/>
                     <result type="*"/>
                     <params>
                        <param name="xmlConfig" type="XML" default="null"/>
                     </params>
                  </constructor>
               </constructors>
               <methods>
                  <method name="createChild" fullname="org.robotlegs.adapters:SwiftSuspendersInjector/createChild" accessLevel="public" result_type="org.robotlegs.core:IInjector" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   
   Create an injector that inherits rules from its parent
   
   ]]></description>
                     <shortDescription><![CDATA[
   
   Create an injector that inherits rules from its parent
   
   ]]></shortDescription>
                     <versions/>
                     <result type="org.robotlegs.core:IInjector">
                        <![CDATA[The injector 
   ]]>
                        <classRef name="IInjector" fullName="org.robotlegs.core:IInjector" packageName="org.robotlegs.core" relativePath="../core/IInjector.html"/>
                     </result>
                     <params>
                        <param name="applicationDomain" type="flash.system:ApplicationDomain" default="null"/>
                     </params>
                  </method>
               </methods>
               <fields>
                  <field name="XML_CONFIG" fullname="org.robotlegs.adapters:SwiftSuspendersInjector/protected:XML_CONFIG" accessLevel="protected" type="XML" isConst="true" isStatic="true" defaultValue="unknown">
                     <versions/>
                  </field>
               </fields>
            </asClass>
            <asClass name="SwiftSuspendersReflector" type="class" fullname="org.robotlegs.adapters:SwiftSuspendersReflector" accessLevel="public" isFinal="false" isDynamic="false" packageName="org.robotlegs.adapters" path="" relativePath="../" href="" taghref="" inheritDoc="false">
               <description><![CDATA[
  SwiftSuspender <code>IReflector</code> adpater - See: <a href="http://github.com/tschneidereit/SwiftSuspenders">SwiftSuspenders</a>
  
  ]]></description>
               <shortDescription><![CDATA[
  SwiftSuspender <code>IReflector</code> adpater - See: <a href="http://github.com/tschneidereit/SwiftSuspenders">SwiftSuspenders</a>
  
  ]]></shortDescription>
               <versions/>
               <author>tschneidereit</author>
               <asAncestors>
                  <asAncestor>
                     <classRef name="org.swiftsuspenders.Reflector" fullName="org.swiftsuspenders.Reflector" relativePath="none"/>
                  </asAncestor>
               </asAncestors>
               <asImplements>
                  <asAncestor>
                     <classRef name="IReflector" fullName="org.robotlegs.core:IReflector" packageName="org.robotlegs.core" relativePath="../core/IReflector.html"/>
                     <methods>
                        <method name="classExtendsOrImplements" fullname="org.robotlegs.core:IReflector/org.robotlegs.core:IReflector:classExtendsOrImplements" accessLevel="public" result_type="Boolean" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Does this class or class name implement this superclass or interface?
   
   ]]></shortDescription>
                           <params>
                              <param name="classOrClassName" type="Object"/>
                              <param name="superclass" type="Class"/>
                              <param name="applicationDomain" type="flash.system:ApplicationDomain" default="null"/>
                           </params>
                        </method>
                        <method name="getClass" fullname="org.robotlegs.core:IReflector/org.robotlegs.core:IReflector:getClass" accessLevel="public" result_type="Class" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Get the class of this instance
   
   ]]></shortDescription>
                           <params>
                              <param name="value" type=""/>
                              <param name="applicationDomain" type="flash.system:ApplicationDomain" default="null"/>
                           </params>
                        </method>
                        <method name="getFQCN" fullname="org.robotlegs.core:IReflector/org.robotlegs.core:IReflector:getFQCN" accessLevel="public" result_type="String" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Get the Fully Qualified Class Name of this instance, class name, or class
   
   ]]></shortDescription>
                           <params>
                              <param name="value" type=""/>
                              <param name="replaceColons" type="Boolean" default="false"/>
                           </params>
                        </method>
                     </methods>
                  </asAncestor>
               </asImplements>
            </asClass>
         </classes>
      </asPackage>
      <asPackage name="org.robotlegs.base">
         <classes>
            <asClass name="MediatorBase" type="class" fullname="org.robotlegs.base:MediatorBase" accessLevel="public" isFinal="false" isDynamic="false" packageName="org.robotlegs.base" path="" relativePath="../" href="" taghref="" inheritDoc="false">
               <description><![CDATA[
  An abstract <code>IMediator</code> implementation
  ]]></description>
               <shortDescription><![CDATA[
  An abstract <code>IMediator</code> implementation
  ]]></shortDescription>
               <versions/>
               <author/>
               <asDecendants>
                  <classRef name="Mediator" fullName="org.robotlegs.mvcs:Mediator" packageName="org.robotlegs.mvcs" relativePath="../mvcs/Mediator.html"/>
               </asDecendants>
               <asAncestors/>
               <asImplements>
                  <asAncestor>
                     <classRef name="IMediator" fullName="org.robotlegs.core:IMediator" packageName="org.robotlegs.core" relativePath="../core/IMediator.html"/>
                     <methods>
                        <method name="getViewComponent" fullname="org.robotlegs.core:IMediator/org.robotlegs.core:IMediator:getViewComponent" accessLevel="public" result_type="Object" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   The <code>IMediator</code>'s view component
      ]]></shortDescription>
                        </method>
                        <method name="onRegister" fullname="org.robotlegs.core:IMediator/org.robotlegs.core:IMediator:onRegister" accessLevel="public" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Should be invoked by the <code>IMediator</code> itself when it is ready to be interacted with
      <p>Override and place your initialization code here</p>
   ]]></shortDescription>
                        </method>
                        <method name="onRemove" fullname="org.robotlegs.core:IMediator/org.robotlegs.core:IMediator:onRemove" accessLevel="public" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Should be invoked by the <code>IMediator</code> itself when it is ready to for cleanup
      <p>Override and place your cleanup code here</p>
   ]]></shortDescription>
                        </method>
                        <method name="preRegister" fullname="org.robotlegs.core:IMediator/org.robotlegs.core:IMediator:preRegister" accessLevel="public" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Should be invoked by the <code>IMediatorMap</code> during <code>IMediator</code> registration
   ]]></shortDescription>
                        </method>
                        <method name="preRemove" fullname="org.robotlegs.core:IMediator/org.robotlegs.core:IMediator:preRemove" accessLevel="public" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Invoked when the <code>IMediator</code> has been removed by the <code>IMediatorMap</code>
   ]]></shortDescription>
                        </method>
                        <method name="setViewComponent" fullname="org.robotlegs.core:IMediator/org.robotlegs.core:IMediator:setViewComponent" accessLevel="public" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   The <code>IMediator</code>'s view component
      ]]></shortDescription>
                           <params>
                              <param name="viewComponent" type="Object"/>
                           </params>
                        </method>
                     </methods>
                  </asAncestor>
               </asImplements>
               <constructors>
                  <constructor name="MediatorBase" fullname="org.robotlegs.base:MediatorBase/MediatorBase" accessLevel="public" result_type="*" inheritDoc="false">
                     <description><![CDATA[
   Creates a new <code>Mediator</code> object
   ]]></description>
                     <shortDescription><![CDATA[
   Creates a new <code>Mediator</code> object
   ]]></shortDescription>
                     <versions/>
                     <result type="*"/>
                  </constructor>
               </constructors>
               <methods>
                  <method name="checkFlex" fullname="org.robotlegs.base:MediatorBase/protected:checkFlex" accessLevel="protected" result_type="Boolean" isFinal="false" isOverride="false" isStatic="true" inheritDoc="false">
                     <description><![CDATA[
   Flex framework work-around part #3
      <p>Checks for availability of the Flex framework by trying to get the class for UIComponent.</p>
   ]]></description>
                     <shortDescription><![CDATA[
   Flex framework work-around part #3
      <p>Checks for availability of the Flex framework by trying to get the class for UIComponent.</p>
   ]]></shortDescription>
                     <versions/>
                     <result type="Boolean"/>
                  </method>
                  <method name="getViewComponent" fullname="org.robotlegs.base:MediatorBase/getViewComponent" accessLevel="public" result_type="Object" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   
   The <code>IMediator</code>'s view component
      ]]></description>
                     <shortDescription><![CDATA[
   
   The <code>IMediator</code>'s view component
      ]]></shortDescription>
                     <versions/>
                     <result type="Object"><![CDATA[The view component
   ]]></result>
                  </method>
                  <method name="onCreationComplete" fullname="org.robotlegs.base:MediatorBase/protected:onCreationComplete" accessLevel="protected" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   Flex framework work-around part #4
      <p><code>FlexEvent.CREATION_COMPLETE</code> handler for this Mediator's View Component</p>
      ]]></description>
                     <shortDescription><![CDATA[
   Flex framework work-around part #4
      <p><code>FlexEvent.CREATION_COMPLETE</code> handler for this Mediator's View Component</p>
      ]]></shortDescription>
                     <versions/>
                     <result type="void"/>
                     <params>
                        <param name="e" type="flash.events:Event">
                           <description><![CDATA[The Flex <code>FlexEvent</code> event
   ]]></description>
                        </param>
                     </params>
                  </method>
                  <method name="onRegister" fullname="org.robotlegs.base:MediatorBase/onRegister" accessLevel="public" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   
   Should be invoked by the <code>IMediator</code> itself when it is ready to be interacted with
      <p>Override and place your initialization code here</p>
   ]]></description>
                     <shortDescription><![CDATA[
   
   Should be invoked by the <code>IMediator</code> itself when it is ready to be interacted with
      <p>Override and place your initialization code here</p>
   ]]></shortDescription>
                     <versions/>
                     <result type="void"/>
                  </method>
                  <method name="onRemove" fullname="org.robotlegs.base:MediatorBase/onRemove" accessLevel="public" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   
   Should be invoked by the <code>IMediator</code> itself when it is ready to for cleanup
      <p>Override and place your cleanup code here</p>
   ]]></description>
                     <shortDescription><![CDATA[
   
   Should be invoked by the <code>IMediator</code> itself when it is ready to for cleanup
      <p>Override and place your cleanup code here</p>
   ]]></shortDescription>
                     <versions/>
                     <result type="void"/>
                  </method>
                  <method name="preRegister" fullname="org.robotlegs.base:MediatorBase/preRegister" accessLevel="public" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   
   Should be invoked by the <code>IMediatorMap</code> during <code>IMediator</code> registration
   ]]></description>
                     <shortDescription><![CDATA[
   
   Should be invoked by the <code>IMediatorMap</code> during <code>IMediator</code> registration
   ]]></shortDescription>
                     <versions/>
                     <result type="void"/>
                  </method>
                  <method name="preRemove" fullname="org.robotlegs.base:MediatorBase/preRemove" accessLevel="public" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   
   Invoked when the <code>IMediator</code> has been removed by the <code>IMediatorMap</code>
   ]]></description>
                     <shortDescription><![CDATA[
   
   Invoked when the <code>IMediator</code> has been removed by the <code>IMediatorMap</code>
   ]]></shortDescription>
                     <versions/>
                     <result type="void"/>
                  </method>
                  <method name="setViewComponent" fullname="org.robotlegs.base:MediatorBase/setViewComponent" accessLevel="public" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   
   The <code>IMediator</code>'s view component
      ]]></description>
                     <shortDescription><![CDATA[
   
   The <code>IMediator</code>'s view component
      ]]></shortDescription>
                     <versions/>
                     <result type="void"/>
                     <params>
                        <param name="viewComponent" type="Object">
                           <description><![CDATA[view component
   ]]></description>
                        </param>
                     </params>
                  </method>
               </methods>
               <fields>
                  <field name="UIComponentClass" fullname="org.robotlegs.base:MediatorBase/protected:UIComponentClass" accessLevel="protected" type="Class" isConst="false" isStatic="true">
                     <description><![CDATA[
   Flex framework work-around part #1
   ]]></description>
                     <shortDescription><![CDATA[
   Flex framework work-around part #1
   ]]></shortDescription>
                     <versions/>
                  </field>
                  <field name="flexAvailable" fullname="org.robotlegs.base:MediatorBase/protected:flexAvailable" accessLevel="protected" type="Boolean" isConst="true" isStatic="true" defaultValue="">
                     <description><![CDATA[
   Flex framework work-around part #2
   ]]></description>
                     <shortDescription><![CDATA[
   Flex framework work-around part #2
   ]]></shortDescription>
                     <versions/>
                  </field>
                  <field name="removed" fullname="org.robotlegs.base:MediatorBase/protected:removed" accessLevel="protected" type="Boolean" isConst="false" isStatic="false">
                     <description><![CDATA[
   Internal
      <p>In the case of deffered instantiation, onRemove might get called before
   onCreationComplete has fired. This here Bool helps us track that scenario.</p>
   ]]></description>
                     <shortDescription><![CDATA[
   Internal
      <p>In the case of deffered instantiation, onRemove might get called before
   onCreationComplete has fired.]]></shortDescription>
                     <versions/>
                  </field>
                  <field name="viewComponent" fullname="org.robotlegs.base:MediatorBase/protected:viewComponent" accessLevel="protected" type="Object" isConst="false" isStatic="false">
                     <description><![CDATA[
   Internal
      <p>This Mediator's View Component - used by the RobotLegs MVCS framework internally.
   You should declare a dependency on a concrete view component in your
   implementation instead of working with this property</p>
   ]]></description>
                     <shortDescription><![CDATA[
   Internal
      <p>This Mediator's View Component - used by the RobotLegs MVCS framework internally.]]></shortDescription>
                     <versions/>
                  </field>
               </fields>
            </asClass>
            <asClass name="CommandMap" type="class" fullname="org.robotlegs.base:CommandMap" accessLevel="public" isFinal="false" isDynamic="false" packageName="org.robotlegs.base" path="" relativePath="../" href="" taghref="" inheritDoc="false">
               <description><![CDATA[
  An abstract <code>ICommandMap</code> implementation
  ]]></description>
               <shortDescription><![CDATA[
  An abstract <code>ICommandMap</code> implementation
  ]]></shortDescription>
               <versions/>
               <author/>
               <asAncestors/>
               <asImplements>
                  <asAncestor>
                     <classRef name="ICommandMap" fullName="org.robotlegs.core:ICommandMap" packageName="org.robotlegs.core" relativePath="../core/ICommandMap.html"/>
                     <methods>
                        <method name="detain" fullname="org.robotlegs.core:ICommandMap/org.robotlegs.core:ICommandMap:detain" accessLevel="public" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Detain a Command instance
   
   ]]></shortDescription>
                           <params>
                              <param name="command" type="Object"/>
                           </params>
                        </method>
                        <method name="execute" fullname="org.robotlegs.core:ICommandMap/org.robotlegs.core:ICommandMap:execute" accessLevel="public" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Execute a Command with an optional payload
   
   <p>The <code>commandClass</code> must implement an execute() method</p>
   
   ]]></shortDescription>
                           <params>
                              <param name="commandClass" type="Class"/>
                              <param name="payload" type="Object" default="null"/>
                              <param name="payloadClass" type="Class" default="null"/>
                              <param name="named" type="String" default=""/>
                           </params>
                        </method>
                        <method name="hasEventCommand" fullname="org.robotlegs.core:ICommandMap/org.robotlegs.core:ICommandMap:hasEventCommand" accessLevel="public" result_type="Boolean" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Check if a Class has been mapped to an Event type
      ]]></shortDescription>
                           <params>
                              <param name="eventType" type="String"/>
                              <param name="commandClass" type="Class"/>
                              <param name="eventClass" type="Class" default="null"/>
                           </params>
                        </method>
                        <method name="mapEvent" fullname="org.robotlegs.core:ICommandMap/org.robotlegs.core:ICommandMap:mapEvent" accessLevel="public" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Map a Class to an Event type
   
   <p>The <code>commandClass</code> must implement an execute() method</p>
   
   ]]></shortDescription>
                           <params>
                              <param name="eventType" type="String"/>
                              <param name="commandClass" type="Class"/>
                              <param name="eventClass" type="Class" default="null"/>
                              <param name="oneshot" type="Boolean" default="false"/>
                           </params>
                        </method>
                        <method name="release" fullname="org.robotlegs.core:ICommandMap/org.robotlegs.core:ICommandMap:release" accessLevel="public" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Release a Command instance
   
   ]]></shortDescription>
                           <params>
                              <param name="command" type="Object"/>
                           </params>
                        </method>
                        <method name="unmapEvent" fullname="org.robotlegs.core:ICommandMap/org.robotlegs.core:ICommandMap:unmapEvent" accessLevel="public" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Unmap a Class to Event type mapping
      ]]></shortDescription>
                           <params>
                              <param name="eventType" type="String"/>
                              <param name="commandClass" type="Class"/>
                              <param name="eventClass" type="Class" default="null"/>
                           </params>
                        </method>
                        <method name="unmapEvents" fullname="org.robotlegs.core:ICommandMap/org.robotlegs.core:ICommandMap:unmapEvents" accessLevel="public" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Removes all mappings made through <code>mapEvent</code>
   ]]></shortDescription>
                        </method>
                     </methods>
                  </asAncestor>
               </asImplements>
               <constructors>
                  <constructor name="CommandMap" fullname="org.robotlegs.base:CommandMap/CommandMap" accessLevel="public" result_type="*" inheritDoc="false">
                     <description><![CDATA[
   Creates a new <code>CommandMap</code> object
      ]]></description>
                     <shortDescription><![CDATA[
   Creates a new <code>CommandMap</code> object
      ]]></shortDescription>
                     <versions/>
                     <result type="*"/>
                     <params>
                        <param name="eventDispatcher" type="flash.events:IEventDispatcher">
                           <description><![CDATA[The <code>IEventDispatcher</code> to listen to
   ]]></description>
                        </param>
                        <param name="injector" type="org.robotlegs.core:IInjector">
                           <classRef name="IInjector" fullName="org.robotlegs.core:IInjector" packageName="org.robotlegs.core" relativePath="../core/IInjector.html"/>
                           <description><![CDATA[An <code>IInjector</code> to use for this context
   ]]></description>
                        </param>
                        <param name="reflector" type="org.robotlegs.core:IReflector">
                           <classRef name="IReflector" fullName="org.robotlegs.core:IReflector" packageName="org.robotlegs.core" relativePath="../core/IReflector.html"/>
                           <description><![CDATA[An <code>IReflector</code> to use for this context
   ]]></description>
                        </param>
                     </params>
                  </constructor>
               </constructors>
               <methods>
                  <method name="detain" fullname="org.robotlegs.base:CommandMap/detain" accessLevel="public" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   
   Detain a Command instance
   
   ]]></description>
                     <shortDescription><![CDATA[
   
   Detain a Command instance
   
   ]]></shortDescription>
                     <versions/>
                     <result type="void"/>
                     <params>
                        <param name="command" type="Object">
                           <description><![CDATA[The Command instance to detain
   ]]></description>
                        </param>
                     </params>
                  </method>
                  <method name="execute" fullname="org.robotlegs.base:CommandMap/execute" accessLevel="public" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   
   Execute a Command with an optional payload
   
   <p>The <code>commandClass</code> must implement an execute() method</p>
   
   ]]></description>
                     <shortDescription><![CDATA[
   
   Execute a Command with an optional payload
   
   <p>The <code>commandClass</code> must implement an execute() method</p>
   
   ]]></shortDescription>
                     <versions/>
                     <result type="void"/>
                     <params>
                        <param name="commandClass" type="Class">
                           <description><![CDATA[The Class to instantiate - must have an execute() method
   ]]></description>
                        </param>
                        <param name="payload" type="Object" default="null">
                           <description><![CDATA[An optional payload
   ]]></description>
                        </param>
                        <param name="payloadClass" type="Class" default="null">
                           <description><![CDATA[ An optional class to inject the payload as
   ]]></description>
                        </param>
                        <param name="named" type="String" default="">
                           <description><![CDATA[An optional name for the payload injection
   
   ]]></description>
                        </param>
                     </params>
                  </method>
                  <method name="hasEventCommand" fullname="org.robotlegs.base:CommandMap/hasEventCommand" accessLevel="public" result_type="Boolean" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   
   Check if a Class has been mapped to an Event type
      ]]></description>
                     <shortDescription><![CDATA[
   
   Check if a Class has been mapped to an Event type
      ]]></shortDescription>
                     <versions/>
                     <result type="Boolean"><![CDATA[Whether the Class is mapped to this Event type
   ]]></result>
                     <params>
                        <param name="eventType" type="String">
                           <description><![CDATA[The Event type
   ]]></description>
                        </param>
                        <param name="commandClass" type="Class">
                           <description><![CDATA[The Class
   ]]></description>
                        </param>
                        <param name="eventClass" type="Class" default="null">
                           <description><![CDATA[Optional Event class for a stronger mapping. Defaults to <code>flash.events.Event</code>.
   ]]></description>
                        </param>
                     </params>
                  </method>
                  <method name="mapEvent" fullname="org.robotlegs.base:CommandMap/mapEvent" accessLevel="public" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   
   Map a Class to an Event type
   
   <p>The <code>commandClass</code> must implement an execute() method</p>
   
   ]]></description>
                     <shortDescription><![CDATA[
   
   Map a Class to an Event type
   
   <p>The <code>commandClass</code> must implement an execute() method</p>
   
   ]]></shortDescription>
                     <versions/>
                     <result type="void"/>
                     <params>
                        <param name="eventType" type="String">
                           <description><![CDATA[The Event type to listen for
   ]]></description>
                        </param>
                        <param name="commandClass" type="Class">
                           <description><![CDATA[The Class to instantiate - must have an execute() method
   ]]></description>
                        </param>
                        <param name="eventClass" type="Class" default="null">
                           <description><![CDATA[Optional Event class for a stronger mapping. Defaults to <code>flash.events.Event</code>. Your commandClass can optionally [Inject] a variable of this type to access the event that triggered the command.
   ]]></description>
                        </param>
                        <param name="oneshot" type="Boolean" default="false">
                           <description><![CDATA[Unmap the Class after execution?
   
   ]]></description>
                        </param>
                     </params>
                  </method>
                  <method name="release" fullname="org.robotlegs.base:CommandMap/release" accessLevel="public" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   
   Release a Command instance
   
   ]]></description>
                     <shortDescription><![CDATA[
   
   Release a Command instance
   
   ]]></shortDescription>
                     <versions/>
                     <result type="void"/>
                     <params>
                        <param name="command" type="Object">
                           <description><![CDATA[The Command instance to release for garbage collection
   ]]></description>
                        </param>
                     </params>
                  </method>
                  <method name="routeEventToCommand" fullname="org.robotlegs.base:CommandMap/protected:routeEventToCommand" accessLevel="protected" result_type="Boolean" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   Event Handler
      ]]></description>
                     <shortDescription><![CDATA[
   Event Handler
      ]]></shortDescription>
                     <versions/>
                     <result type="Boolean"><![CDATA[<code>true</code> if the event was routed to a Command and the Command was executed,
                 <code>false</code> otherwise
   ]]></result>
                     <params>
                        <param name="event" type="flash.events:Event">
                           <description><![CDATA[The <code>Event</code>
   ]]></description>
                        </param>
                        <param name="commandClass" type="Class">
                           <description><![CDATA[The Class to construct and execute
   ]]></description>
                        </param>
                        <param name="oneshot" type="Boolean">
                           <description><![CDATA[Should this command mapping be removed after execution?
         ]]></description>
                        </param>
                        <param name="originalEventClass" type="Class"/>
                     </params>
                  </method>
                  <method name="unmapEvent" fullname="org.robotlegs.base:CommandMap/unmapEvent" accessLevel="public" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   
   Unmap a Class to Event type mapping
      ]]></description>
                     <shortDescription><![CDATA[
   
   Unmap a Class to Event type mapping
      ]]></shortDescription>
                     <versions/>
                     <result type="void"/>
                     <params>
                        <param name="eventType" type="String">
                           <description><![CDATA[The Event type
   ]]></description>
                        </param>
                        <param name="commandClass" type="Class">
                           <description><![CDATA[The Class to unmap
   ]]></description>
                        </param>
                        <param name="eventClass" type="Class" default="null">
                           <description><![CDATA[Optional Event class for a stronger mapping. Defaults to <code>flash.events.Event</code>.
   ]]></description>
                        </param>
                     </params>
                  </method>
                  <method name="unmapEvents" fullname="org.robotlegs.base:CommandMap/unmapEvents" accessLevel="public" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   
   Removes all mappings made through <code>mapEvent</code>
   ]]></description>
                     <shortDescription><![CDATA[
   
   Removes all mappings made through <code>mapEvent</code>
   ]]></shortDescription>
                     <versions/>
                     <result type="void"/>
                  </method>
                  <method name="verifyCommandClass" fullname="org.robotlegs.base:CommandMap/protected:verifyCommandClass" accessLevel="protected" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <canThrow>
                        <description><![CDATA[
   ]]></description>
                     </canThrow>
                     <description><![CDATA[
   ]]></description>
                     <shortDescription><![CDATA[
   ]]></shortDescription>
                     <versions/>
                     <result type="void"/>
                     <params>
                        <param name="commandClass" type="Class"/>
                     </params>
                  </method>
               </methods>
               <fields>
                  <field name="detainedCommands" fullname="org.robotlegs.base:CommandMap/protected:detainedCommands" accessLevel="protected" type="flash.utils:Dictionary" isConst="false" isStatic="false">
                     <versions/>
                  </field>
                  <field name="eventDispatcher" fullname="org.robotlegs.base:CommandMap/protected:eventDispatcher" accessLevel="protected" type="flash.events:IEventDispatcher" isConst="false" isStatic="false">
                     <description><![CDATA[
   The <code>IEventDispatcher</code> to listen to
   ]]></description>
                     <shortDescription><![CDATA[
   The <code>IEventDispatcher</code> to listen to
   ]]></shortDescription>
                     <versions/>
                  </field>
                  <field name="eventTypeMap" fullname="org.robotlegs.base:CommandMap/protected:eventTypeMap" accessLevel="protected" type="flash.utils:Dictionary" isConst="false" isStatic="false">
                     <description><![CDATA[
   Internal
      TODO: This needs to be documented
   ]]></description>
                     <shortDescription><![CDATA[
   Internal
      TODO: This needs to be documented
   ]]></shortDescription>
                     <versions/>
                  </field>
                  <field name="injector" fullname="org.robotlegs.base:CommandMap/protected:injector" accessLevel="protected" type="org.robotlegs.core:IInjector" isConst="false" isStatic="false">
                     <classRef name="IInjector" fullName="org.robotlegs.core:IInjector" packageName="org.robotlegs.core" relativePath="../core/IInjector.html"/>
                     <description><![CDATA[
   The <code>IInjector</code> to inject with
   ]]></description>
                     <shortDescription><![CDATA[
   The <code>IInjector</code> to inject with
   ]]></shortDescription>
                     <versions/>
                  </field>
                  <field name="reflector" fullname="org.robotlegs.base:CommandMap/protected:reflector" accessLevel="protected" type="org.robotlegs.core:IReflector" isConst="false" isStatic="false">
                     <classRef name="IReflector" fullName="org.robotlegs.core:IReflector" packageName="org.robotlegs.core" relativePath="../core/IReflector.html"/>
                     <description><![CDATA[
   The <code>IReflector</code> to reflect with
   ]]></description>
                     <shortDescription><![CDATA[
   The <code>IReflector</code> to reflect with
   ]]></shortDescription>
                     <versions/>
                  </field>
                  <field name="verifiedCommandClasses" fullname="org.robotlegs.base:CommandMap/protected:verifiedCommandClasses" accessLevel="protected" type="flash.utils:Dictionary" isConst="false" isStatic="false">
                     <description><![CDATA[
   Internal
      Collection of command classes that have been verified to implement an <code>execute</code> method
   ]]></description>
                     <shortDescription><![CDATA[
   Internal
      Collection of command classes that have been verified to implement an <code>execute</code> method
   ]]></shortDescription>
                     <versions/>
                  </field>
               </fields>
            </asClass>
            <asClass name="ContextBase" type="class" fullname="org.robotlegs.base:ContextBase" accessLevel="public" isFinal="false" isDynamic="false" packageName="org.robotlegs.base" path="" relativePath="../" href="" taghref="" inheritDoc="false">
               <description><![CDATA[
  An abstract <code>IContext</code> implementation
  ]]></description>
               <shortDescription><![CDATA[
  An abstract <code>IContext</code> implementation
  ]]></shortDescription>
               <versions/>
               <author/>
               <asDecendants>
                  <classRef name="Context" fullName="org.robotlegs.mvcs:Context" packageName="org.robotlegs.mvcs" relativePath="../mvcs/Context.html"/>
               </asDecendants>
               <asAncestors/>
               <asImplements>
                  <asAncestor>
                     <classRef name="IContext" fullName="org.robotlegs.core:IContext" packageName="org.robotlegs.core" relativePath="../core/IContext.html"/>
                  </asAncestor>
                  <asAncestor>
                     <classRef name="flash.events.IEventDispatcher" fullName="flash.events.IEventDispatcher" relativePath="none"/>
                  </asAncestor>
               </asImplements>
               <constructors>
                  <constructor name="ContextBase" fullname="org.robotlegs.base:ContextBase/ContextBase" accessLevel="public" result_type="*" inheritDoc="false">
                     <description><![CDATA[
   Abstract Context Implementation
      <p>Extend this class to create a Framework or Application context</p>
   ]]></description>
                     <shortDescription><![CDATA[
   Abstract Context Implementation
      <p>Extend this class to create a Framework or Application context</p>
   ]]></shortDescription>
                     <versions/>
                     <result type="*"/>
                  </constructor>
               </constructors>
               <fields>
                  <field name="eventDispatcher" fullname="org.robotlegs.base:ContextBase/eventDispatcher/get" accessLevel="public" isConst="false" isStatic="false" type="flash.events:IEventDispatcher" inheritDoc="false" only="read">
                     <description><![CDATA[
   
   The <code>IContext</code>'s <code>IEventDispatcher</code>
   ]]></description>
                     <shortDescription><![CDATA[
   
   The <code>IContext</code>'s <code>IEventDispatcher</code>
   ]]></shortDescription>
                     <versions/>
                  </field>
               </fields>
            </asClass>
            <asClass name="ContextError" type="class" fullname="org.robotlegs.base:ContextError" accessLevel="public" isFinal="false" isDynamic="false" packageName="org.robotlegs.base" path="" relativePath="../" href="" taghref="" inheritDoc="false">
               <description><![CDATA[
  A framework Error implementation
  ]]></description>
               <shortDescription><![CDATA[
  A framework Error implementation
  ]]></shortDescription>
               <versions/>
               <author/>
               <asAncestors>
                  <asAncestor>
                     <classRef name="Error" fullName="Error" relativePath="none"/>
                  </asAncestor>
               </asAncestors>
               <constructors>
                  <constructor name="ContextError" fullname="org.robotlegs.base:ContextError/ContextError" accessLevel="public" result_type="*" inheritDoc="false">
                     <versions/>
                     <result type="*"/>
                     <params>
                        <param name="message" type="String" default=""/>
                        <param name="id" type="int" default="0"/>
                     </params>
                  </constructor>
               </constructors>
               <fields>
                  <field name="E_COMMANDMAP_NOIMPL" fullname="org.robotlegs.base:ContextError/E_COMMANDMAP_NOIMPL" accessLevel="public" type="String" isConst="true" isStatic="true" defaultValue="Command Class does not implement an execute() method">
                     <versions/>
                  </field>
                  <field name="E_COMMANDMAP_OVR" fullname="org.robotlegs.base:ContextError/E_COMMANDMAP_OVR" accessLevel="public" type="String" isConst="true" isStatic="true" defaultValue="Cannot overwrite map">
                     <versions/>
                  </field>
                  <field name="E_CONTEXT_INJECTOR" fullname="org.robotlegs.base:ContextError/E_CONTEXT_INJECTOR" accessLevel="public" type="String" isConst="true" isStatic="true" defaultValue="The ContextBase does not specify a concrete IInjector. Please override the injector getter in your concrete or abstract Context.">
                     <versions/>
                  </field>
                  <field name="E_CONTEXT_REFLECTOR" fullname="org.robotlegs.base:ContextError/E_CONTEXT_REFLECTOR" accessLevel="public" type="String" isConst="true" isStatic="true" defaultValue="The ContextBase does not specify a concrete IReflector. Please override the reflector getter in your concrete or abstract Context.">
                     <versions/>
                  </field>
                  <field name="E_EVENTMAP_NOSNOOPING" fullname="org.robotlegs.base:ContextError/E_EVENTMAP_NOSNOOPING" accessLevel="public" type="String" isConst="true" isStatic="true" defaultValue="Listening to the context eventDispatcher is not enabled for this EventMap">
                     <versions/>
                  </field>
                  <field name="E_MEDIATORMAP_NOIMPL" fullname="org.robotlegs.base:ContextError/E_MEDIATORMAP_NOIMPL" accessLevel="public" type="String" isConst="true" isStatic="true" defaultValue="Mediator Class does not implement IMediator">
                     <versions/>
                  </field>
                  <field name="E_MEDIATORMAP_OVR" fullname="org.robotlegs.base:ContextError/E_MEDIATORMAP_OVR" accessLevel="public" type="String" isConst="true" isStatic="true" defaultValue="Mediator Class has already been mapped to a View Class in this context">
                     <versions/>
                  </field>
               </fields>
            </asClass>
            <asClass name="EventMap" type="class" fullname="org.robotlegs.base:EventMap" accessLevel="public" isFinal="false" isDynamic="false" packageName="org.robotlegs.base" path="" relativePath="../" href="" taghref="" inheritDoc="false">
               <description><![CDATA[
  An abstract <code>IEventMap</code> implementation
  ]]></description>
               <shortDescription><![CDATA[
  An abstract <code>IEventMap</code> implementation
  ]]></shortDescription>
               <versions/>
               <author/>
               <asAncestors/>
               <asImplements>
                  <asAncestor>
                     <classRef name="IEventMap" fullName="org.robotlegs.core:IEventMap" packageName="org.robotlegs.core" relativePath="../core/IEventMap.html"/>
                     <methods>
                        <method name="mapListener" fullname="org.robotlegs.core:IEventMap/org.robotlegs.core:IEventMap:mapListener" accessLevel="public" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   The same as calling <code>addEventListener</code> directly on the <code>IEventDispatcher</code>,
   but keeps a list of listeners for easy (usually automatic) removal.]]></shortDescription>
                           <params>
                              <param name="dispatcher" type="flash.events:IEventDispatcher"/>
                              <param name="type" type="String"/>
                              <param name="listener" type="Function"/>
                              <param name="eventClass" type="Class" default="null"/>
                              <param name="useCapture" type="Boolean" default="false"/>
                              <param name="priority" type="int" default="0"/>
                              <param name="useWeakReference" type="Boolean" default="true"/>
                           </params>
                        </method>
                        <method name="unmapListener" fullname="org.robotlegs.core:IEventMap/org.robotlegs.core:IEventMap:unmapListener" accessLevel="public" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   The same as calling <code>removeEventListener</code> directly on the <code>IEventDispatcher</code>,
   but updates our local list of listeners.]]></shortDescription>
                           <params>
                              <param name="dispatcher" type="flash.events:IEventDispatcher"/>
                              <param name="type" type="String"/>
                              <param name="listener" type="Function"/>
                              <param name="eventClass" type="Class" default="null"/>
                              <param name="useCapture" type="Boolean" default="false"/>
                           </params>
                        </method>
                        <method name="unmapListeners" fullname="org.robotlegs.core:IEventMap/org.robotlegs.core:IEventMap:unmapListeners" accessLevel="public" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Removes all listeners registered through <code>mapListener</code>
   ]]></shortDescription>
                        </method>
                     </methods>
                  </asAncestor>
               </asImplements>
               <constructors>
                  <constructor name="EventMap" fullname="org.robotlegs.base:EventMap/EventMap" accessLevel="public" result_type="*" inheritDoc="false">
                     <description><![CDATA[
   Creates a new <code>EventMap</code> object
      ]]></description>
                     <shortDescription><![CDATA[
   Creates a new <code>EventMap</code> object
      ]]></shortDescription>
                     <versions/>
                     <result type="*"/>
                     <params>
                        <param name="eventDispatcher" type="flash.events:IEventDispatcher">
                           <description><![CDATA[An <code>IEventDispatcher</code> to treat as a bus
   ]]></description>
                        </param>
                     </params>
                  </constructor>
               </constructors>
               <methods>
                  <method name="mapListener" fullname="org.robotlegs.base:EventMap/mapListener" accessLevel="public" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   The same as calling <code>addEventListener</code> directly on the <code>IEventDispatcher</code>,
   but keeps a list of listeners for easy (usually automatic) removal.
      ]]></description>
                     <shortDescription><![CDATA[
   The same as calling <code>addEventListener</code> directly on the <code>IEventDispatcher</code>,
   but keeps a list of listeners for easy (usually automatic) removal.]]></shortDescription>
                     <versions/>
                     <result type="void"/>
                     <params>
                        <param name="dispatcher" type="flash.events:IEventDispatcher">
                           <description><![CDATA[The <code>IEventDispatcher</code> to listen to
   ]]></description>
                        </param>
                        <param name="type" type="String">
                           <description><![CDATA[The <code>Event</code> type to listen for
   ]]></description>
                        </param>
                        <param name="listener" type="Function">
                           <description><![CDATA[The <code>Event</code> handler
   ]]></description>
                        </param>
                        <param name="eventClass" type="Class" default="null">
                           <description><![CDATA[Optional Event class for a stronger mapping. Defaults to <code>flash.events.Event</code>.
   ]]></description>
                        </param>
                        <param name="useCapture" type="Boolean" default="false">
                           <description><![CDATA[  ]]></description>
                        </param>
                        <param name="priority" type="int" default="0">
                           <description><![CDATA[  ]]></description>
                        </param>
                        <param name="useWeakReference" type="Boolean" default="true">
                           <description><![CDATA[  ]]></description>
                        </param>
                     </params>
                  </method>
                  <method name="routeEventToListener" fullname="org.robotlegs.base:EventMap/protected:routeEventToListener" accessLevel="protected" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   Event Handler
      ]]></description>
                     <shortDescription><![CDATA[
   Event Handler
      ]]></shortDescription>
                     <versions/>
                     <result type="void"/>
                     <params>
                        <param name="event" type="flash.events:Event">
                           <description><![CDATA[The <code>Event</code>
   ]]></description>
                        </param>
                        <param name="listener" type="Function">
                           <description><![CDATA[  ]]></description>
                        </param>
                        <param name="originalEventClass" type="Class">
                           <description><![CDATA[  ]]></description>
                        </param>
                     </params>
                  </method>
                  <method name="unmapListener" fullname="org.robotlegs.base:EventMap/unmapListener" accessLevel="public" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   The same as calling <code>removeEventListener</code> directly on the <code>IEventDispatcher</code>,
   but updates our local list of listeners.
      ]]></description>
                     <shortDescription><![CDATA[
   The same as calling <code>removeEventListener</code> directly on the <code>IEventDispatcher</code>,
   but updates our local list of listeners.]]></shortDescription>
                     <versions/>
                     <result type="void"/>
                     <params>
                        <param name="dispatcher" type="flash.events:IEventDispatcher">
                           <description><![CDATA[The <code>IEventDispatcher</code>
   ]]></description>
                        </param>
                        <param name="type" type="String">
                           <description><![CDATA[The <code>Event</code> type
   ]]></description>
                        </param>
                        <param name="listener" type="Function">
                           <description><![CDATA[The <code>Event</code> handler
   ]]></description>
                        </param>
                        <param name="eventClass" type="Class" default="null">
                           <description><![CDATA[Optional Event class for a stronger mapping. Defaults to <code>flash.events.Event</code>.
   ]]></description>
                        </param>
                        <param name="useCapture" type="Boolean" default="false">
                           <description><![CDATA[  ]]></description>
                        </param>
                     </params>
                  </method>
                  <method name="unmapListeners" fullname="org.robotlegs.base:EventMap/unmapListeners" accessLevel="public" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   Removes all listeners registered through <code>mapListener</code>
   ]]></description>
                     <shortDescription><![CDATA[
   Removes all listeners registered through <code>mapListener</code>
   ]]></shortDescription>
                     <versions/>
                     <result type="void"/>
                  </method>
               </methods>
               <fields>
                  <field name="eventDispatcher" fullname="org.robotlegs.base:EventMap/protected:eventDispatcher" accessLevel="protected" type="flash.events:IEventDispatcher" isConst="false" isStatic="false">
                     <description><![CDATA[
   The <code>IEventDispatcher</code>
   ]]></description>
                     <shortDescription><![CDATA[
   The <code>IEventDispatcher</code>
   ]]></shortDescription>
                     <versions/>
                  </field>
                  <field name="dispatcherListeningEnabled" fullname="org.robotlegs.base:EventMap/dispatcherListeningEnabled/get" accessLevel="public" isConst="false" isStatic="false" type="Boolean" inheritDoc="false" only="read-write">
                     <description><![CDATA[
   ]]></description>
                     <shortDescription><![CDATA[
   ]]></shortDescription>
                     <versions/>
                  </field>
               </fields>
            </asClass>
            <asClass name="ViewMap" type="class" fullname="org.robotlegs.base:ViewMap" accessLevel="public" isFinal="false" isDynamic="false" packageName="org.robotlegs.base" path="" relativePath="../" href="" taghref="" inheritDoc="false">
               <description><![CDATA[
  An abstract <code>IViewMap</code> implementation
  ]]></description>
               <shortDescription><![CDATA[
  An abstract <code>IViewMap</code> implementation
  ]]></shortDescription>
               <versions/>
               <author/>
               <asAncestors>
                  <asAncestor>
                     <classRef name="ViewMapBase" fullName="org.robotlegs.base:ViewMapBase" packageName="org.robotlegs.base" relativePath="ViewMapBase.html"/>
                     <fields>
                        <field name="contextView" fullname="org.robotlegs.base:ViewMapBase/contextView/get" accessLevel="public" isConst="false" isStatic="false" type="flash.display:DisplayObjectContainer" inheritDoc="false">
                           <shortDescription><![CDATA[
   ]]></shortDescription>
                        </field>
                        <field name="enabled" fullname="org.robotlegs.base:ViewMapBase/enabled/get" accessLevel="public" isConst="false" isStatic="false" type="Boolean" inheritDoc="false">
                           <shortDescription><![CDATA[
   ]]></shortDescription>
                        </field>
                     </fields>
                  </asAncestor>
               </asAncestors>
               <asImplements>
                  <asAncestor>
                     <classRef name="IViewMap" fullName="org.robotlegs.core:IViewMap" packageName="org.robotlegs.core" relativePath="../core/IViewMap.html"/>
                     <fields>
                        <field name="contextView" fullname="org.robotlegs.core:IViewMap/org.robotlegs.core:IViewMap:contextView/get" accessLevel="public" isConst="false" isStatic="false" type="flash.display:DisplayObjectContainer" inheritDoc="false">
                           <shortDescription><![CDATA[
   The <code>IViewMap</code>'s <code>DisplayObjectContainer</code>
      ]]></shortDescription>
                        </field>
                        <field name="enabled" fullname="org.robotlegs.core:IViewMap/org.robotlegs.core:IViewMap:enabled/get" accessLevel="public" isConst="false" isStatic="false" type="Boolean" inheritDoc="false">
                           <shortDescription><![CDATA[
   The <code>IViewMap</code>'s enabled status
      ]]></shortDescription>
                        </field>
                     </fields>
                     <methods>
                        <method name="hasPackage" fullname="org.robotlegs.core:IViewMap/org.robotlegs.core:IViewMap:hasPackage" accessLevel="public" result_type="Boolean" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Check if a package has been registered for automatic injection
      ]]></shortDescription>
                           <params>
                              <param name="packageName" type="String"/>
                           </params>
                        </method>
                        <method name="hasType" fullname="org.robotlegs.core:IViewMap/org.robotlegs.core:IViewMap:hasType" accessLevel="public" result_type="Boolean" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Check if a class or interface has been registered for automatic injection
      ]]></shortDescription>
                           <params>
                              <param name="type" type="Class"/>
                           </params>
                        </method>
                        <method name="mapPackage" fullname="org.robotlegs.core:IViewMap/org.robotlegs.core:IViewMap:mapPackage" accessLevel="public" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Map an entire package (including sub-packages) for automatic injection
   
   ]]></shortDescription>
                           <params>
                              <param name="packageName" type="String"/>
                           </params>
                        </method>
                        <method name="mapType" fullname="org.robotlegs.core:IViewMap/org.robotlegs.core:IViewMap:mapType" accessLevel="public" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Map a view component class or interface for automatic injection
      ]]></shortDescription>
                           <params>
                              <param name="type" type="Class"/>
                           </params>
                        </method>
                        <method name="unmapPackage" fullname="org.robotlegs.core:IViewMap/org.robotlegs.core:IViewMap:unmapPackage" accessLevel="public" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Unmap a package
   
   ]]></shortDescription>
                           <params>
                              <param name="packageName" type="String"/>
                           </params>
                        </method>
                        <method name="unmapType" fullname="org.robotlegs.core:IViewMap/org.robotlegs.core:IViewMap:unmapType" accessLevel="public" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Unmap a view component class or interface
      ]]></shortDescription>
                           <params>
                              <param name="type" type="Class"/>
                           </params>
                        </method>
                     </methods>
                  </asAncestor>
               </asImplements>
               <constructors>
                  <constructor name="ViewMap" fullname="org.robotlegs.base:ViewMap/ViewMap" accessLevel="public" result_type="*" inheritDoc="false">
                     <description><![CDATA[
   Creates a new <code>ViewMap</code> object
      ]]></description>
                     <shortDescription><![CDATA[
   Creates a new <code>ViewMap</code> object
      ]]></shortDescription>
                     <versions/>
                     <result type="*"/>
                     <params>
                        <param name="contextView" type="flash.display:DisplayObjectContainer">
                           <description><![CDATA[The root view node of the context. The map will listen for ADDED_TO_STAGE events on this node
   ]]></description>
                        </param>
                        <param name="injector" type="org.robotlegs.core:IInjector">
                           <classRef name="IInjector" fullName="org.robotlegs.core:IInjector" packageName="org.robotlegs.core" relativePath="../core/IInjector.html"/>
                           <description><![CDATA[An <code>IInjector</code> to use for this context
   ]]></description>
                        </param>
                     </params>
                  </constructor>
               </constructors>
               <methods>
                  <method name="hasPackage" fullname="org.robotlegs.base:ViewMap/hasPackage" accessLevel="public" result_type="Boolean" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   
   Check if a package has been registered for automatic injection
      ]]></description>
                     <shortDescription><![CDATA[
   
   Check if a package has been registered for automatic injection
      ]]></shortDescription>
                     <versions/>
                     <result type="Boolean"><![CDATA[Whether a package has been registered for automatic injection
   ]]></result>
                     <params>
                        <param name="packageName" type="String">
                           <description><![CDATA[The substring to compare
   ]]></description>
                        </param>
                     </params>
                  </method>
                  <method name="hasType" fullname="org.robotlegs.base:ViewMap/hasType" accessLevel="public" result_type="Boolean" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   
   Check if a class or interface has been registered for automatic injection
      ]]></description>
                     <shortDescription><![CDATA[
   
   Check if a class or interface has been registered for automatic injection
      ]]></shortDescription>
                     <versions/>
                     <result type="Boolean"><![CDATA[Whether an interface has been registered for automatic injection
   ]]></result>
                     <params>
                        <param name="type" type="Class">
                           <description><![CDATA[The concrete view interface 
   ]]></description>
                        </param>
                     </params>
                  </method>
                  <method name="injectInto" fullname="org.robotlegs.base:ViewMap/protected:injectInto" accessLevel="protected" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <versions/>
                     <result type="void"/>
                     <params>
                        <param name="target" type="flash.display:DisplayObject"/>
                     </params>
                  </method>
                  <method name="mapPackage" fullname="org.robotlegs.base:ViewMap/mapPackage" accessLevel="public" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   
   Map an entire package (including sub-packages) for automatic injection
   
   ]]></description>
                     <shortDescription><![CDATA[
   
   Map an entire package (including sub-packages) for automatic injection
   
   ]]></shortDescription>
                     <versions/>
                     <result type="void"/>
                     <params>
                        <param name="packageName" type="String">
                           <description><![CDATA[The substring to compare
   ]]></description>
                        </param>
                     </params>
                  </method>
                  <method name="mapType" fullname="org.robotlegs.base:ViewMap/mapType" accessLevel="public" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   
   Map a view component class or interface for automatic injection
      ]]></description>
                     <shortDescription><![CDATA[
   
   Map a view component class or interface for automatic injection
      ]]></shortDescription>
                     <versions/>
                     <result type="void"/>
                     <params>
                        <param name="type" type="Class">
                           <description><![CDATA[The concrete view Interface
   ]]></description>
                        </param>
                     </params>
                  </method>
                  <method name="unmapPackage" fullname="org.robotlegs.base:ViewMap/unmapPackage" accessLevel="public" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   
   Unmap a package
   
   ]]></description>
                     <shortDescription><![CDATA[
   
   Unmap a package
   
   ]]></shortDescription>
                     <versions/>
                     <result type="void"/>
                     <params>
                        <param name="packageName" type="String">
                           <description><![CDATA[The substring to compare
   ]]></description>
                        </param>
                     </params>
                  </method>
                  <method name="unmapType" fullname="org.robotlegs.base:ViewMap/unmapType" accessLevel="public" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   
   Unmap a view component class or interface
      ]]></description>
                     <shortDescription><![CDATA[
   
   Unmap a view component class or interface
      ]]></shortDescription>
                     <versions/>
                     <result type="void"/>
                     <params>
                        <param name="type" type="Class">
                           <description><![CDATA[The concrete view Interface
   ]]></description>
                        </param>
                     </params>
                  </method>
               </methods>
            </asClass>
            <asClass name="MediatorMap" type="class" fullname="org.robotlegs.base:MediatorMap" accessLevel="public" isFinal="false" isDynamic="false" packageName="org.robotlegs.base" path="" relativePath="../" href="" taghref="" inheritDoc="false">
               <description><![CDATA[
  An abstract <code>IMediatorMap</code> implementation
  ]]></description>
               <shortDescription><![CDATA[
  An abstract <code>IMediatorMap</code> implementation
  ]]></shortDescription>
               <versions/>
               <author/>
               <asAncestors>
                  <asAncestor>
                     <classRef name="ViewMapBase" fullName="org.robotlegs.base:ViewMapBase" packageName="org.robotlegs.base" relativePath="ViewMapBase.html"/>
                     <fields>
                        <field name="contextView" fullname="org.robotlegs.base:ViewMapBase/contextView/get" accessLevel="public" isConst="false" isStatic="false" type="flash.display:DisplayObjectContainer" inheritDoc="false">
                           <shortDescription><![CDATA[
   ]]></shortDescription>
                        </field>
                        <field name="enabled" fullname="org.robotlegs.base:ViewMapBase/enabled/get" accessLevel="public" isConst="false" isStatic="false" type="Boolean" inheritDoc="false">
                           <shortDescription><![CDATA[
   ]]></shortDescription>
                        </field>
                     </fields>
                  </asAncestor>
               </asAncestors>
               <asImplements>
                  <asAncestor>
                     <classRef name="IMediatorMap" fullName="org.robotlegs.core:IMediatorMap" packageName="org.robotlegs.core" relativePath="../core/IMediatorMap.html"/>
                     <fields>
                        <field name="contextView" fullname="org.robotlegs.core:IMediatorMap/org.robotlegs.core:IMediatorMap:contextView/get" accessLevel="public" isConst="false" isStatic="false" type="flash.display:DisplayObjectContainer" inheritDoc="false">
                           <shortDescription><![CDATA[
   The <code>IMediatorMap</code>'s <code>DisplayObjectContainer</code>
      ]]></shortDescription>
                        </field>
                        <field name="enabled" fullname="org.robotlegs.core:IMediatorMap/org.robotlegs.core:IMediatorMap:enabled/get" accessLevel="public" isConst="false" isStatic="false" type="Boolean" inheritDoc="false">
                           <shortDescription><![CDATA[
   The <code>IMediatorMap</code>'s enabled status
   
   ]]></shortDescription>
                        </field>
                     </fields>
                     <methods>
                        <method name="createMediator" fullname="org.robotlegs.core:IMediatorMap/org.robotlegs.core:IMediatorMap:createMediator" accessLevel="public" result_type="org.robotlegs.core:IMediator" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Create an instance of a mapped <code>IMediator</code>
      <p>This will instantiate and register a Mediator for a given View Component.]]></shortDescription>
                           <result type="org.robotlegs.core:IMediator">
                              <classRef name="IMediator" fullName="org.robotlegs.core:IMediator" packageName="org.robotlegs.core" relativePath="../core/IMediator.html"/>
                           </result>
                           <params>
                              <param name="viewComponent" type="Object"/>
                           </params>
                        </method>
                        <method name="hasMediator" fullname="org.robotlegs.core:IMediatorMap/org.robotlegs.core:IMediatorMap:hasMediator" accessLevel="public" result_type="Boolean" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Check if the <code>IMediator</code> has been registered
      ]]></shortDescription>
                           <params>
                              <param name="mediator" type="org.robotlegs.core:IMediator">
                                 <classRef name="IMediator" fullName="org.robotlegs.core:IMediator" packageName="org.robotlegs.core" relativePath="../core/IMediator.html"/>
                              </param>
                           </params>
                        </method>
                        <method name="hasMediatorForView" fullname="org.robotlegs.core:IMediatorMap/org.robotlegs.core:IMediatorMap:hasMediatorForView" accessLevel="public" result_type="Boolean" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Check if an <code>IMediator</code> has been registered for a view instance
      ]]></shortDescription>
                           <params>
                              <param name="viewComponent" type="Object"/>
                           </params>
                        </method>
                        <method name="mapView" fullname="org.robotlegs.core:IMediatorMap/org.robotlegs.core:IMediatorMap:mapView" accessLevel="public" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Map an <code>IMediator</code> to a view Class
      ]]></shortDescription>
                           <params>
                              <param name="viewClassOrName" type=""/>
                              <param name="mediatorClass" type="Class"/>
                              <param name="injectViewAs" type="Class" default="null"/>
                              <param name="autoCreate" type="Boolean" default="true"/>
                              <param name="autoRemove" type="Boolean" default="true"/>
                           </params>
                        </method>
                        <method name="registerMediator" fullname="org.robotlegs.core:IMediatorMap/org.robotlegs.core:IMediatorMap:registerMediator" accessLevel="public" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Manually register an <code>IMediator</code> instance
      <p>NOTE: Registering a Mediator will NOT inject it's dependencies.]]></shortDescription>
                           <params>
                              <param name="viewComponent" type="Object"/>
                              <param name="mediator" type="org.robotlegs.core:IMediator">
                                 <classRef name="IMediator" fullName="org.robotlegs.core:IMediator" packageName="org.robotlegs.core" relativePath="../core/IMediator.html"/>
                              </param>
                           </params>
                        </method>
                        <method name="removeMediator" fullname="org.robotlegs.core:IMediatorMap/org.robotlegs.core:IMediatorMap:removeMediator" accessLevel="public" result_type="org.robotlegs.core:IMediator" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Remove a registered <code>IMediator</code> instance
      ]]></shortDescription>
                           <result type="org.robotlegs.core:IMediator">
                              <classRef name="IMediator" fullName="org.robotlegs.core:IMediator" packageName="org.robotlegs.core" relativePath="../core/IMediator.html"/>
                           </result>
                           <params>
                              <param name="mediator" type="org.robotlegs.core:IMediator">
                                 <classRef name="IMediator" fullName="org.robotlegs.core:IMediator" packageName="org.robotlegs.core" relativePath="../core/IMediator.html"/>
                              </param>
                           </params>
                        </method>
                        <method name="removeMediatorByView" fullname="org.robotlegs.core:IMediatorMap/org.robotlegs.core:IMediatorMap:removeMediatorByView" accessLevel="public" result_type="org.robotlegs.core:IMediator" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Remove a registered <code>IMediator</code> instance
      ]]></shortDescription>
                           <result type="org.robotlegs.core:IMediator">
                              <classRef name="IMediator" fullName="org.robotlegs.core:IMediator" packageName="org.robotlegs.core" relativePath="../core/IMediator.html"/>
                           </result>
                           <params>
                              <param name="viewComponent" type="Object"/>
                           </params>
                        </method>
                        <method name="retrieveMediator" fullname="org.robotlegs.core:IMediatorMap/org.robotlegs.core:IMediatorMap:retrieveMediator" accessLevel="public" result_type="org.robotlegs.core:IMediator" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Retrieve a registered <code>IMediator</code> instance
      ]]></shortDescription>
                           <result type="org.robotlegs.core:IMediator">
                              <classRef name="IMediator" fullName="org.robotlegs.core:IMediator" packageName="org.robotlegs.core" relativePath="../core/IMediator.html"/>
                           </result>
                           <params>
                              <param name="viewComponent" type="Object"/>
                           </params>
                        </method>
                        <method name="unmapView" fullname="org.robotlegs.core:IMediatorMap/org.robotlegs.core:IMediatorMap:unmapView" accessLevel="public" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Unmap a view Class
    
   ]]></shortDescription>
                           <params>
                              <param name="viewClassOrName" type=""/>
                           </params>
                        </method>
                     </methods>
                  </asAncestor>
               </asImplements>
               <constructors>
                  <constructor name="MediatorMap" fullname="org.robotlegs.base:MediatorMap/MediatorMap" accessLevel="public" result_type="*" inheritDoc="false">
                     <description><![CDATA[
   Creates a new <code>MediatorMap</code> object
      ]]></description>
                     <shortDescription><![CDATA[
   Creates a new <code>MediatorMap</code> object
      ]]></shortDescription>
                     <versions/>
                     <result type="*"/>
                     <params>
                        <param name="contextView" type="flash.display:DisplayObjectContainer">
                           <description><![CDATA[The root view node of the context. The map will listen for ADDED_TO_STAGE events on this node
   ]]></description>
                        </param>
                        <param name="injector" type="org.robotlegs.core:IInjector">
                           <classRef name="IInjector" fullName="org.robotlegs.core:IInjector" packageName="org.robotlegs.core" relativePath="../core/IInjector.html"/>
                           <description><![CDATA[An <code>IInjector</code> to use for this context
   ]]></description>
                        </param>
                        <param name="reflector" type="org.robotlegs.core:IReflector">
                           <classRef name="IReflector" fullName="org.robotlegs.core:IReflector" packageName="org.robotlegs.core" relativePath="../core/IReflector.html"/>
                           <description><![CDATA[An <code>IReflector</code> to use for this context
   ]]></description>
                        </param>
                     </params>
                  </constructor>
               </constructors>
               <methods>
                  <method name="createMediator" fullname="org.robotlegs.base:MediatorMap/createMediator" accessLevel="public" result_type="org.robotlegs.core:IMediator" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   
   Create an instance of a mapped <code>IMediator</code>
      <p>This will instantiate and register a Mediator for a given View Component.
   Mediator dependencies will be automatically resolved.</p>
      ]]></description>
                     <shortDescription><![CDATA[
   
   Create an instance of a mapped <code>IMediator</code>
      <p>This will instantiate and register a Mediator for a given View Component.]]></shortDescription>
                     <versions/>
                     <result type="org.robotlegs.core:IMediator">
                        <![CDATA[The <code>IMediator</code>
   ]]>
                        <classRef name="IMediator" fullName="org.robotlegs.core:IMediator" packageName="org.robotlegs.core" relativePath="../core/IMediator.html"/>
                     </result>
                     <params>
                        <param name="viewComponent" type="Object">
                           <description><![CDATA[An instance of the view Class previously mapped to an <code>IMediator</code> Class
   ]]></description>
                        </param>
                     </params>
                  </method>
                  <method name="hasMediator" fullname="org.robotlegs.base:MediatorMap/hasMediator" accessLevel="public" result_type="Boolean" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   
   Check if the <code>IMediator</code> has been registered
      ]]></description>
                     <shortDescription><![CDATA[
   
   Check if the <code>IMediator</code> has been registered
      ]]></shortDescription>
                     <versions/>
                     <result type="Boolean"><![CDATA[Whether this <code>IMediator</code> has been registered
   ]]></result>
                     <params>
                        <param name="mediator" type="org.robotlegs.core:IMediator">
                           <classRef name="IMediator" fullName="org.robotlegs.core:IMediator" packageName="org.robotlegs.core" relativePath="../core/IMediator.html"/>
                           <description><![CDATA[The <code>IMediator</code> instance
   ]]></description>
                        </param>
                     </params>
                  </method>
                  <method name="hasMediatorForView" fullname="org.robotlegs.base:MediatorMap/hasMediatorForView" accessLevel="public" result_type="Boolean" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   
   Check if an <code>IMediator</code> has been registered for a view instance
      ]]></description>
                     <shortDescription><![CDATA[
   
   Check if an <code>IMediator</code> has been registered for a view instance
      ]]></shortDescription>
                     <versions/>
                     <result type="Boolean"><![CDATA[Whether an <code>IMediator</code> has been registered for this view instance
   ]]></result>
                     <params>
                        <param name="viewComponent" type="Object">
                           <description><![CDATA[The view that the <code>IMediator</code> was registered with
   ]]></description>
                        </param>
                     </params>
                  </method>
                  <method name="mapView" fullname="org.robotlegs.base:MediatorMap/mapView" accessLevel="public" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   
   Map an <code>IMediator</code> to a view Class
      ]]></description>
                     <shortDescription><![CDATA[
   
   Map an <code>IMediator</code> to a view Class
      ]]></shortDescription>
                     <versions/>
                     <result type="void"/>
                     <params>
                        <param name="viewClassOrName" type="">
                           <description><![CDATA[The concrete view Class or Fully Qualified Class Name
   ]]></description>
                        </param>
                        <param name="mediatorClass" type="Class">
                           <description><![CDATA[The <code>IMediator</code> Class
   ]]></description>
                        </param>
                        <param name="injectViewAs" type="Class" default="null">
                           <description><![CDATA[The explicit view Interface or Class that the mediator depends on
   ]]></description>
                        </param>
                        <param name="autoCreate" type="Boolean" default="true">
                           <description><![CDATA[Automatically construct and register an instance of Class <code>mediatorClass</code> when an instance of Class <code>viewClass</code> is detected
   ]]></description>
                        </param>
                        <param name="autoRemove" type="Boolean" default="true">
                           <description><![CDATA[Automatically remove an instance of Class <code>mediatorClass</code> when it's <code>viewClass</code> leaves the ancestory of the context view
   ]]></description>
                        </param>
                     </params>
                  </method>
                  <method name="onViewRemoved" fullname="org.robotlegs.base:MediatorMap/protected:onViewRemoved" accessLevel="protected" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   Flex framework work-around part #5
   ]]></description>
                     <shortDescription><![CDATA[
   Flex framework work-around part #5
   ]]></shortDescription>
                     <versions/>
                     <result type="void"/>
                     <params>
                        <param name="e" type="flash.events:Event"/>
                     </params>
                  </method>
                  <method name="registerMediator" fullname="org.robotlegs.base:MediatorMap/registerMediator" accessLevel="public" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   
   Manually register an <code>IMediator</code> instance
      <p>NOTE: Registering a Mediator will NOT inject it's dependencies.
   It is assumed that dependencies are already satisfied.</p>
      ]]></description>
                     <shortDescription><![CDATA[
   
   Manually register an <code>IMediator</code> instance
      <p>NOTE: Registering a Mediator will NOT inject it's dependencies.]]></shortDescription>
                     <versions/>
                     <result type="void"/>
                     <params>
                        <param name="viewComponent" type="Object">
                           <description><![CDATA[The view component for the <code>IMediator</code>
   ]]></description>
                        </param>
                        <param name="mediator" type="org.robotlegs.core:IMediator">
                           <classRef name="IMediator" fullName="org.robotlegs.core:IMediator" packageName="org.robotlegs.core" relativePath="../core/IMediator.html"/>
                           <description><![CDATA[The <code>IMediator</code> to register
   ]]></description>
                        </param>
                     </params>
                  </method>
                  <method name="removeMediator" fullname="org.robotlegs.base:MediatorMap/removeMediator" accessLevel="public" result_type="org.robotlegs.core:IMediator" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   
   Remove a registered <code>IMediator</code> instance
      ]]></description>
                     <shortDescription><![CDATA[
   
   Remove a registered <code>IMediator</code> instance
      ]]></shortDescription>
                     <versions/>
                     <result type="org.robotlegs.core:IMediator">
                        <![CDATA[The <code>IMediator</code> that was removed
   ]]>
                        <classRef name="IMediator" fullName="org.robotlegs.core:IMediator" packageName="org.robotlegs.core" relativePath="../core/IMediator.html"/>
                     </result>
                     <params>
                        <param name="mediator" type="org.robotlegs.core:IMediator">
                           <classRef name="IMediator" fullName="org.robotlegs.core:IMediator" packageName="org.robotlegs.core" relativePath="../core/IMediator.html"/>
                           <description><![CDATA[The <code>IMediator</code> to remove
   ]]></description>
                        </param>
                     </params>
                  </method>
                  <method name="removeMediatorByView" fullname="org.robotlegs.base:MediatorMap/removeMediatorByView" accessLevel="public" result_type="org.robotlegs.core:IMediator" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   
   Remove a registered <code>IMediator</code> instance
      ]]></description>
                     <shortDescription><![CDATA[
   
   Remove a registered <code>IMediator</code> instance
      ]]></shortDescription>
                     <versions/>
                     <result type="org.robotlegs.core:IMediator">
                        <![CDATA[The <code>IMediator</code> that was removed
   ]]>
                        <classRef name="IMediator" fullName="org.robotlegs.core:IMediator" packageName="org.robotlegs.core" relativePath="../core/IMediator.html"/>
                     </result>
                     <params>
                        <param name="viewComponent" type="Object">
                           <description><![CDATA[The view that the <code>IMediator</code> was registered with
   ]]></description>
                        </param>
                     </params>
                  </method>
                  <method name="removeMediatorLater" fullname="org.robotlegs.base:MediatorMap/protected:removeMediatorLater" accessLevel="protected" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   Flex framework work-around part #6
   ]]></description>
                     <shortDescription><![CDATA[
   Flex framework work-around part #6
   ]]></shortDescription>
                     <versions/>
                     <result type="void"/>
                     <params>
                        <param name="event" type="flash.events:Event"/>
                     </params>
                  </method>
                  <method name="retrieveMediator" fullname="org.robotlegs.base:MediatorMap/retrieveMediator" accessLevel="public" result_type="org.robotlegs.core:IMediator" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   
   Retrieve a registered <code>IMediator</code> instance
      ]]></description>
                     <shortDescription><![CDATA[
   
   Retrieve a registered <code>IMediator</code> instance
      ]]></shortDescription>
                     <versions/>
                     <result type="org.robotlegs.core:IMediator">
                        <![CDATA[The <code>IMediator</code>
   ]]>
                        <classRef name="IMediator" fullName="org.robotlegs.core:IMediator" packageName="org.robotlegs.core" relativePath="../core/IMediator.html"/>
                     </result>
                     <params>
                        <param name="viewComponent" type="Object">
                           <description><![CDATA[The view that the <code>IMediator</code> was registered with
   ]]></description>
                        </param>
                     </params>
                  </method>
                  <method name="unmapView" fullname="org.robotlegs.base:MediatorMap/unmapView" accessLevel="public" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   
   Unmap a view Class
    
   ]]></description>
                     <shortDescription><![CDATA[
   
   Unmap a view Class
    
   ]]></shortDescription>
                     <versions/>
                     <result type="void"/>
                     <params>
                        <param name="viewClassOrName" type="">
                           <description><![CDATA[The concrete view Class or Fully Qualified Class Name
   ]]></description>
                        </param>
                     </params>
                  </method>
               </methods>
            </asClass>
            <asClass name="ContextEvent" type="class" fullname="org.robotlegs.base:ContextEvent" accessLevel="public" isFinal="false" isDynamic="false" packageName="org.robotlegs.base" path="" relativePath="../" href="" taghref="" inheritDoc="false">
               <description><![CDATA[
  A framework Event implementation
  ]]></description>
               <shortDescription><![CDATA[
  A framework Event implementation
  ]]></shortDescription>
               <versions/>
               <author/>
               <asAncestors>
                  <asAncestor>
                     <classRef name="flash.events.Event" fullName="flash.events.Event" relativePath="none"/>
                  </asAncestor>
               </asAncestors>
               <constructors>
                  <constructor name="ContextEvent" fullname="org.robotlegs.base:ContextEvent/ContextEvent" accessLevel="public" result_type="*" inheritDoc="false">
                     <description><![CDATA[
   A generic context <code>Event</code> implementation
      <p>This class is handy for prototype work, but it's usage is not considered Best Practice</p>
      ]]></description>
                     <shortDescription><![CDATA[
   A generic context <code>Event</code> implementation
      <p>This class is handy for prototype work, but it's usage is not considered Best Practice</p>
      ]]></shortDescription>
                     <versions/>
                     <result type="*"/>
                     <params>
                        <param name="type" type="String">
                           <description><![CDATA[The <code>Event</code> type
   ]]></description>
                        </param>
                        <param name="body" type="" default="null">
                           <description><![CDATA[A loosely typed payload
   ]]></description>
                        </param>
                     </params>
                  </constructor>
               </constructors>
               <methods>
                  <method name="clone" fullname="org.robotlegs.base:ContextEvent/clone" accessLevel="public" result_type="flash.events:Event" isFinal="false" isOverride="true" isStatic="false" inheritDoc="false">
                     <versions/>
                     <result type="flash.events:Event"/>
                  </method>
               </methods>
               <fields>
                  <field name="SHUTDOWN" fullname="org.robotlegs.base:ContextEvent/SHUTDOWN" accessLevel="public" type="String" isConst="true" isStatic="true" defaultValue="shutdown">
                     <versions/>
                  </field>
                  <field name="SHUTDOWN_COMPLETE" fullname="org.robotlegs.base:ContextEvent/SHUTDOWN_COMPLETE" accessLevel="public" type="String" isConst="true" isStatic="true" defaultValue="shutdownComplete">
                     <versions/>
                  </field>
                  <field name="STARTUP" fullname="org.robotlegs.base:ContextEvent/STARTUP" accessLevel="public" type="String" isConst="true" isStatic="true" defaultValue="startup">
                     <versions/>
                  </field>
                  <field name="STARTUP_COMPLETE" fullname="org.robotlegs.base:ContextEvent/STARTUP_COMPLETE" accessLevel="public" type="String" isConst="true" isStatic="true" defaultValue="startupComplete">
                     <versions/>
                  </field>
                  <field name="_body" fullname="org.robotlegs.base:ContextEvent/protected:_body" accessLevel="protected" type="" isConst="false" isStatic="false">
                     <versions/>
                  </field>
                  <field name="body" fullname="org.robotlegs.base:ContextEvent/body/get" accessLevel="public" isConst="false" isStatic="false" type="*" inheritDoc="false" only="read">
                     <description><![CDATA[
   Loosely typed <code>Event</code> payload
   ]]></description>
                     <shortDescription><![CDATA[
   Loosely typed <code>Event</code> payload
   ]]></shortDescription>
                     <versions/>
                  </field>
               </fields>
            </asClass>
            <asClass name="ViewMapBase" type="class" fullname="org.robotlegs.base:ViewMapBase" accessLevel="public" isFinal="false" isDynamic="false" packageName="org.robotlegs.base" path="" relativePath="../" href="" taghref="" inheritDoc="false">
               <description><![CDATA[
  A base ViewMap implementation
  ]]></description>
               <shortDescription><![CDATA[
  A base ViewMap implementation
  ]]></shortDescription>
               <versions/>
               <author/>
               <asDecendants>
                  <classRef name="ViewMap" fullName="org.robotlegs.base:ViewMap" packageName="org.robotlegs.base" relativePath="../base/ViewMap.html"/>
                  <classRef name="MediatorMap" fullName="org.robotlegs.base:MediatorMap" packageName="org.robotlegs.base" relativePath="../base/MediatorMap.html"/>
               </asDecendants>
               <asAncestors/>
               <constructors>
                  <constructor name="ViewMapBase" fullname="org.robotlegs.base:ViewMapBase/ViewMapBase" accessLevel="public" result_type="*" inheritDoc="false">
                     <description><![CDATA[
   Creates a new <code>ViewMap</code> object
      ]]></description>
                     <shortDescription><![CDATA[
   Creates a new <code>ViewMap</code> object
      ]]></shortDescription>
                     <versions/>
                     <result type="*"/>
                     <params>
                        <param name="contextView" type="flash.display:DisplayObjectContainer">
                           <description><![CDATA[The root view node of the context. The map will listen for ADDED_TO_STAGE events on this node
   ]]></description>
                        </param>
                        <param name="injector" type="org.robotlegs.core:IInjector">
                           <classRef name="IInjector" fullName="org.robotlegs.core:IInjector" packageName="org.robotlegs.core" relativePath="../core/IInjector.html"/>
                           <description><![CDATA[An <code>IInjector</code> to use for this context
   ]]></description>
                        </param>
                     </params>
                  </constructor>
               </constructors>
               <fields>
                  <field name="contextView" fullname="org.robotlegs.base:ViewMapBase/contextView/get" accessLevel="public" isConst="false" isStatic="false" type="flash.display:DisplayObjectContainer" inheritDoc="false" only="read-write">
                     <description><![CDATA[
   ]]></description>
                     <shortDescription><![CDATA[
   ]]></shortDescription>
                     <versions/>
                  </field>
                  <field name="enabled" fullname="org.robotlegs.base:ViewMapBase/enabled/get" accessLevel="public" isConst="false" isStatic="false" type="Boolean" inheritDoc="false" only="read-write">
                     <description><![CDATA[
   ]]></description>
                     <shortDescription><![CDATA[
   ]]></shortDescription>
                     <versions/>
                  </field>
               </fields>
            </asClass>
         </classes>
      </asPackage>
      <asPackage name="org.robotlegs.mvcs">
         <classes>
            <asClass name="Context" type="class" fullname="org.robotlegs.mvcs:Context" accessLevel="public" isFinal="false" isDynamic="false" packageName="org.robotlegs.mvcs" path="" relativePath="../" href="" taghref="" inheritDoc="false">
               <description><![CDATA[
  Abstract MVCS <code>IContext</code> implementation
  ]]></description>
               <shortDescription><![CDATA[
  Abstract MVCS <code>IContext</code> implementation
  ]]></shortDescription>
               <versions/>
               <author/>
               <asAncestors>
                  <asAncestor>
                     <classRef name="ContextBase" fullName="org.robotlegs.base:ContextBase" packageName="org.robotlegs.base" relativePath="../base/ContextBase.html"/>
                     <fields>
                        <field name="eventDispatcher" fullname="org.robotlegs.base:ContextBase/eventDispatcher/get" accessLevel="public" isConst="false" isStatic="false" type="flash.events:IEventDispatcher" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   The <code>IContext</code>'s <code>IEventDispatcher</code>
   ]]></shortDescription>
                        </field>
                     </fields>
                  </asAncestor>
               </asAncestors>
               <asImplements>
                  <asAncestor>
                     <classRef name="IContext" fullName="org.robotlegs.core:IContext" packageName="org.robotlegs.core" relativePath="../core/IContext.html"/>
                     <fields>
                        <field name="eventDispatcher" fullname="org.robotlegs.core:IContext/org.robotlegs.core:IContext:eventDispatcher/get" accessLevel="public" isConst="false" isStatic="false" type="flash.events:IEventDispatcher" inheritDoc="false">
                           <shortDescription><![CDATA[
   The <code>IContext</code>'s <code>IEventDispatcher</code>
   ]]></shortDescription>
                        </field>
                     </fields>
                  </asAncestor>
               </asImplements>
               <constructors>
                  <constructor name="Context" fullname="org.robotlegs.mvcs:Context/Context" accessLevel="public" result_type="*" inheritDoc="false">
                     <description><![CDATA[
   Abstract Context Implementation
      <p>Extend this class to create a Framework or Application context</p>
      ]]></description>
                     <shortDescription><![CDATA[
   Abstract Context Implementation
      <p>Extend this class to create a Framework or Application context</p>
      ]]></shortDescription>
                     <versions/>
                     <result type="*"/>
                     <params>
                        <param name="contextView" type="flash.display:DisplayObjectContainer" default="null">
                           <description><![CDATA[The root view node of the context. The context will listen for ADDED_TO_STAGE events on this node
   ]]></description>
                        </param>
                        <param name="autoStartup" type="Boolean" default="true">
                           <description><![CDATA[Should this context automatically invoke it's <code>startup</code> method when it's <code>contextView</code> arrives on Stage?
   ]]></description>
                        </param>
                     </params>
                  </constructor>
               </constructors>
               <methods>
                  <method name="mapInjections" fullname="org.robotlegs.mvcs:Context/protected:mapInjections" accessLevel="protected" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   Injection Mapping Hook
      <p>Override this in your Framework context to change the default configuration</p>
      <p>Beware of collisions in your container</p>
   ]]></description>
                     <shortDescription><![CDATA[
   Injection Mapping Hook
      <p>Override this in your Framework context to change the default configuration</p>
      <p>Beware of collisions in your container</p>
   ]]></shortDescription>
                     <versions/>
                     <result type="void"/>
                  </method>
                  <method name="shutdown" fullname="org.robotlegs.mvcs:Context/shutdown" accessLevel="public" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   The Startup Hook
      <p>Override this in your Application context</p>
   ]]></description>
                     <shortDescription><![CDATA[
   The Startup Hook
      <p>Override this in your Application context</p>
   ]]></shortDescription>
                     <versions/>
                     <result type="void"/>
                  </method>
                  <method name="startup" fullname="org.robotlegs.mvcs:Context/startup" accessLevel="public" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   The Startup Hook
      <p>Override this in your Application context</p>
   ]]></description>
                     <shortDescription><![CDATA[
   The Startup Hook
      <p>Override this in your Application context</p>
   ]]></shortDescription>
                     <versions/>
                     <result type="void"/>
                  </method>
               </methods>
               <fields>
                  <field name="commandMap" fullname="org.robotlegs.mvcs:Context/protected:commandMap/get" accessLevel="protected" isConst="false" isStatic="false" type="org.robotlegs.core:ICommandMap" inheritDoc="false" only="read-write">
                     <description><![CDATA[
   The <code>ICommandMap</code> for this <code>IContext</code>
   ]]></description>
                     <shortDescription><![CDATA[
   The <code>ICommandMap</code> for this <code>IContext</code>
   ]]></shortDescription>
                     <versions/>
                     <classRef name="ICommandMap" fullName="org.robotlegs.core:ICommandMap" packageName="org.robotlegs.core" relativePath="../core/ICommandMap.html"/>
                  </field>
                  <field name="contextView" fullname="org.robotlegs.mvcs:Context/contextView/get" accessLevel="public" isConst="false" isStatic="false" type="flash.display:DisplayObjectContainer" inheritDoc="false" only="read-write">
                     <description><![CDATA[
   The <code>DisplayObjectContainer</code> that scopes this <code>IContext</code>
   ]]></description>
                     <shortDescription><![CDATA[
   The <code>DisplayObjectContainer</code> that scopes this <code>IContext</code>
   ]]></shortDescription>
                     <versions/>
                  </field>
                  <field name="injector" fullname="org.robotlegs.mvcs:Context/protected:injector/get" accessLevel="protected" isConst="false" isStatic="false" type="org.robotlegs.core:IInjector" inheritDoc="false" only="read-write">
                     <description><![CDATA[
   The <code>IInjector</code> for this <code>IContext</code>
   ]]></description>
                     <shortDescription><![CDATA[
   The <code>IInjector</code> for this <code>IContext</code>
   ]]></shortDescription>
                     <versions/>
                     <classRef name="IInjector" fullName="org.robotlegs.core:IInjector" packageName="org.robotlegs.core" relativePath="../core/IInjector.html"/>
                  </field>
                  <field name="mediatorMap" fullname="org.robotlegs.mvcs:Context/protected:mediatorMap/get" accessLevel="protected" isConst="false" isStatic="false" type="org.robotlegs.core:IMediatorMap" inheritDoc="false" only="read-write">
                     <description><![CDATA[
   The <code>IMediatorMap</code> for this <code>IContext</code>
   ]]></description>
                     <shortDescription><![CDATA[
   The <code>IMediatorMap</code> for this <code>IContext</code>
   ]]></shortDescription>
                     <versions/>
                     <classRef name="IMediatorMap" fullName="org.robotlegs.core:IMediatorMap" packageName="org.robotlegs.core" relativePath="../core/IMediatorMap.html"/>
                  </field>
                  <field name="reflector" fullname="org.robotlegs.mvcs:Context/protected:reflector/get" accessLevel="protected" isConst="false" isStatic="false" type="org.robotlegs.core:IReflector" inheritDoc="false" only="read-write">
                     <description><![CDATA[
   The <code>IReflector</code> for this <code>IContext</code>
   ]]></description>
                     <shortDescription><![CDATA[
   The <code>IReflector</code> for this <code>IContext</code>
   ]]></shortDescription>
                     <versions/>
                     <classRef name="IReflector" fullName="org.robotlegs.core:IReflector" packageName="org.robotlegs.core" relativePath="../core/IReflector.html"/>
                  </field>
                  <field name="viewMap" fullname="org.robotlegs.mvcs:Context/protected:viewMap/get" accessLevel="protected" isConst="false" isStatic="false" type="org.robotlegs.core:IViewMap" inheritDoc="false" only="read-write">
                     <description><![CDATA[
   The <code>IViewMap</code> for this <code>IContext</code>
   ]]></description>
                     <shortDescription><![CDATA[
   The <code>IViewMap</code> for this <code>IContext</code>
   ]]></shortDescription>
                     <versions/>
                     <classRef name="IViewMap" fullName="org.robotlegs.core:IViewMap" packageName="org.robotlegs.core" relativePath="../core/IViewMap.html"/>
                  </field>
               </fields>
            </asClass>
            <asClass name="Actor" type="class" fullname="org.robotlegs.mvcs:Actor" accessLevel="public" isFinal="false" isDynamic="false" packageName="org.robotlegs.mvcs" path="" relativePath="../" href="" taghref="" inheritDoc="false">
               <description><![CDATA[
  Abstract MVCS <code>IActor</code> implementation
    <p>As part of the MVCS implementation the <code>Actor</code> provides core functionality to an applications
  various working parts.</p>
    <p>Some possible uses for the <code>Actor</code> include, but are no means limited to:</p>
    <ul>
  <li>Service classes</li>
  <li>Model classes</li>
  <li>Controller classes</li>
  <li>Presentation model classes</li>
  </ul>
    <p>Essentially any class where it might be advantagous to have basic dependency injection supplied is a candidate
  for extending <code>Actor</code>.</p>
    ]]></description>
               <shortDescription><![CDATA[
  Abstract MVCS <code>IActor</code> implementation
    <p>As part of the MVCS implementation the <code>Actor</code> provides core functionality to an applications
  various working parts.</p>
    <p>Some possible uses for the <code>Actor</code> include, but are no means limited to:</p>
    <ul>
  <li>Service classes</li>
  <li>Model classes</li>
  <li>Controller classes</li>
  <li>Presentation model classes</li>
  </ul>
    <p>Essentially any class where it might be advantagous to have basic dependency injection supplied is a candidate
  for extending <code>Actor</code>.</p>
    ]]></shortDescription>
               <versions/>
               <author/>
               <asAncestors/>
               <constructors>
                  <constructor name="Actor" fullname="org.robotlegs.mvcs:Actor/Actor" accessLevel="public" result_type="*" inheritDoc="false">
                     <versions/>
                     <result type="*"/>
                  </constructor>
               </constructors>
               <methods>
                  <method name="dispatch" fullname="org.robotlegs.mvcs:Actor/protected:dispatch" accessLevel="protected" result_type="Boolean" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   Dispatch helper method
      ]]></description>
                     <shortDescription><![CDATA[
   Dispatch helper method
      ]]></shortDescription>
                     <versions/>
                     <result type="Boolean"/>
                     <params>
                        <param name="event" type="flash.events:Event">
                           <description><![CDATA[The <code>Event</code> to dispatch on the <code>IContext</code>'s <code>IEventDispatcher</code>
   ]]></description>
                        </param>
                     </params>
                  </method>
               </methods>
               <fields>
                  <field name="eventDispatcher" fullname="org.robotlegs.mvcs:Actor/eventDispatcher/get" accessLevel="public" isConst="false" isStatic="false" type="flash.events:IEventDispatcher" inheritDoc="false" only="read-write">
                     <description><![CDATA[
   ]]></description>
                     <shortDescription><![CDATA[
   ]]></shortDescription>
                     <versions/>
                  </field>
                  <field name="eventMap" fullname="org.robotlegs.mvcs:Actor/protected:eventMap/get" accessLevel="protected" isConst="false" isStatic="false" type="org.robotlegs.core:IEventMap" inheritDoc="false" only="read">
                     <description><![CDATA[
   Local EventMap
      ]]></description>
                     <shortDescription><![CDATA[
   Local EventMap
      ]]></shortDescription>
                     <versions/>
                     <classRef name="IEventMap" fullName="org.robotlegs.core:IEventMap" packageName="org.robotlegs.core" relativePath="../core/IEventMap.html"/>
                  </field>
               </fields>
            </asClass>
            <asClass name="Mediator" type="class" fullname="org.robotlegs.mvcs:Mediator" accessLevel="public" isFinal="false" isDynamic="false" packageName="org.robotlegs.mvcs" path="" relativePath="../" href="" taghref="" inheritDoc="false">
               <description><![CDATA[
  Abstract MVCS <code>IMediator</code> implementation
  ]]></description>
               <shortDescription><![CDATA[
  Abstract MVCS <code>IMediator</code> implementation
  ]]></shortDescription>
               <versions/>
               <author/>
               <asAncestors>
                  <asAncestor>
                     <classRef name="MediatorBase" fullName="org.robotlegs.base:MediatorBase" packageName="org.robotlegs.base" relativePath="../base/MediatorBase.html"/>
                     <fields>
                        <field name="UIComponentClass" fullname="org.robotlegs.base:MediatorBase/protected:UIComponentClass" accessLevel="protected" type="Class" isConst="false" isStatic="true">
                           <shortDescription><![CDATA[
   Flex framework work-around part #1
   ]]></shortDescription>
                        </field>
                        <field name="flexAvailable" fullname="org.robotlegs.base:MediatorBase/protected:flexAvailable" accessLevel="protected" type="Boolean" isConst="true" isStatic="true" defaultValue="">
                           <shortDescription><![CDATA[
   Flex framework work-around part #2
   ]]></shortDescription>
                        </field>
                        <field name="removed" fullname="org.robotlegs.base:MediatorBase/protected:removed" accessLevel="protected" type="Boolean" isConst="false" isStatic="false">
                           <shortDescription><![CDATA[
   Internal
      <p>In the case of deffered instantiation, onRemove might get called before
   onCreationComplete has fired.]]></shortDescription>
                        </field>
                        <field name="viewComponent" fullname="org.robotlegs.base:MediatorBase/protected:viewComponent" accessLevel="protected" type="Object" isConst="false" isStatic="false">
                           <shortDescription><![CDATA[
   Internal
      <p>This Mediator's View Component - used by the RobotLegs MVCS framework internally.]]></shortDescription>
                        </field>
                     </fields>
                     <methods>
                        <method name="checkFlex" fullname="org.robotlegs.base:MediatorBase/protected:checkFlex" accessLevel="protected" result_type="Boolean" isFinal="false" isOverride="false" isStatic="true" inheritDoc="false">
                           <shortDescription><![CDATA[
   Flex framework work-around part #3
      <p>Checks for availability of the Flex framework by trying to get the class for UIComponent.</p>
   ]]></shortDescription>
                        </method>
                        <method name="getViewComponent" fullname="org.robotlegs.base:MediatorBase/getViewComponent" accessLevel="public" result_type="Object" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   The <code>IMediator</code>'s view component
      ]]></shortDescription>
                        </method>
                        <method name="onCreationComplete" fullname="org.robotlegs.base:MediatorBase/protected:onCreationComplete" accessLevel="protected" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   Flex framework work-around part #4
      <p><code>FlexEvent.CREATION_COMPLETE</code> handler for this Mediator's View Component</p>
      ]]></shortDescription>
                           <params>
                              <param name="e" type="flash.events:Event"/>
                           </params>
                        </method>
                        <method name="onRegister" fullname="org.robotlegs.base:MediatorBase/onRegister" accessLevel="public" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Should be invoked by the <code>IMediator</code> itself when it is ready to be interacted with
      <p>Override and place your initialization code here</p>
   ]]></shortDescription>
                        </method>
                        <method name="onRemove" fullname="org.robotlegs.base:MediatorBase/onRemove" accessLevel="public" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Should be invoked by the <code>IMediator</code> itself when it is ready to for cleanup
      <p>Override and place your cleanup code here</p>
   ]]></shortDescription>
                        </method>
                        <method name="preRegister" fullname="org.robotlegs.base:MediatorBase/preRegister" accessLevel="public" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   Should be invoked by the <code>IMediatorMap</code> during <code>IMediator</code> registration
   ]]></shortDescription>
                        </method>
                        <method name="setViewComponent" fullname="org.robotlegs.base:MediatorBase/setViewComponent" accessLevel="public" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                           <shortDescription><![CDATA[
   
   The <code>IMediator</code>'s view component
      ]]></shortDescription>
                           <params>
                              <param name="viewComponent" type="Object"/>
                           </params>
                        </method>
                     </methods>
                  </asAncestor>
               </asAncestors>
               <constructors>
                  <constructor name="Mediator" fullname="org.robotlegs.mvcs:Mediator/Mediator" accessLevel="public" result_type="*" inheritDoc="false">
                     <versions/>
                     <result type="*"/>
                  </constructor>
               </constructors>
               <methods>
                  <method name="addContextListener" fullname="org.robotlegs.mvcs:Mediator/protected:addContextListener" accessLevel="protected" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   Syntactical sugar for mapping a listener to an <code>IEventDispatcher</code> 
   
   ]]></description>
                     <shortDescription><![CDATA[
   Syntactical sugar for mapping a listener to an <code>IEventDispatcher</code> 
   
   ]]></shortDescription>
                     <versions/>
                     <result type="void"/>
                     <params>
                        <param name="type" type="String">
                           <description><![CDATA[  ]]></description>
                        </param>
                        <param name="listener" type="Function">
                           <description><![CDATA[  ]]></description>
                        </param>
                        <param name="eventClass" type="Class" default="null">
                           <description><![CDATA[  ]]></description>
                        </param>
                        <param name="useCapture" type="Boolean" default="false">
                           <description><![CDATA[  ]]></description>
                        </param>
                        <param name="priority" type="int" default="0">
                           <description><![CDATA[  ]]></description>
                        </param>
                        <param name="useWeakReference" type="Boolean" default="true">
                           <description><![CDATA[  ]]></description>
                        </param>
                     </params>
                  </method>
                  <method name="addViewListener" fullname="org.robotlegs.mvcs:Mediator/protected:addViewListener" accessLevel="protected" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   Syntactical sugar for mapping a listener to the <code>viewComponent</code> 
   
   ]]></description>
                     <shortDescription><![CDATA[
   Syntactical sugar for mapping a listener to the <code>viewComponent</code> 
   
   ]]></shortDescription>
                     <versions/>
                     <result type="void"/>
                     <params>
                        <param name="type" type="String">
                           <description><![CDATA[  ]]></description>
                        </param>
                        <param name="listener" type="Function">
                           <description><![CDATA[  ]]></description>
                        </param>
                        <param name="eventClass" type="Class" default="null">
                           <description><![CDATA[  ]]></description>
                        </param>
                        <param name="useCapture" type="Boolean" default="false">
                           <description><![CDATA[  ]]></description>
                        </param>
                        <param name="priority" type="int" default="0">
                           <description><![CDATA[  ]]></description>
                        </param>
                        <param name="useWeakReference" type="Boolean" default="true">
                           <description><![CDATA[  
   ]]></description>
                        </param>
                     </params>
                  </method>
                  <method name="dispatch" fullname="org.robotlegs.mvcs:Mediator/protected:dispatch" accessLevel="protected" result_type="Boolean" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   Dispatch helper method
      ]]></description>
                     <shortDescription><![CDATA[
   Dispatch helper method
      ]]></shortDescription>
                     <versions/>
                     <result type="Boolean"/>
                     <params>
                        <param name="event" type="flash.events:Event">
                           <description><![CDATA[The Event to dispatch on the <code>IContext</code>'s <code>IEventDispatcher</code>
   ]]></description>
                        </param>
                     </params>
                  </method>
                  <method name="preRemove" fullname="org.robotlegs.mvcs:Mediator/preRemove" accessLevel="public" result_type="void" isFinal="false" isOverride="true" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   
   
   Invoked when the <code>IMediator</code> has been removed by the <code>IMediatorMap</code>
   ]]></description>
                     <shortDescription><![CDATA[
   
   
   Invoked when the <code>IMediator</code> has been removed by the <code>IMediatorMap</code>
   ]]></shortDescription>
                     <versions/>
                     <result type="void"/>
                  </method>
               </methods>
               <fields>
                  <field name="contextView" fullname="org.robotlegs.mvcs:Mediator/contextView" accessLevel="public" type="flash.display:DisplayObjectContainer" isConst="false" isStatic="false">
                     <versions/>
                  </field>
                  <field name="mediatorMap" fullname="org.robotlegs.mvcs:Mediator/mediatorMap" accessLevel="public" type="org.robotlegs.core:IMediatorMap" isConst="false" isStatic="false">
                     <classRef name="IMediatorMap" fullName="org.robotlegs.core:IMediatorMap" packageName="org.robotlegs.core" relativePath="../core/IMediatorMap.html"/>
                     <versions/>
                  </field>
                  <field name="eventDispatcher" fullname="org.robotlegs.mvcs:Mediator/eventDispatcher/get" accessLevel="public" isConst="false" isStatic="false" type="flash.events:IEventDispatcher" inheritDoc="false" only="read-write">
                     <description><![CDATA[
   ]]></description>
                     <shortDescription><![CDATA[
   ]]></shortDescription>
                     <versions/>
                  </field>
                  <field name="eventMap" fullname="org.robotlegs.mvcs:Mediator/protected:eventMap/get" accessLevel="protected" isConst="false" isStatic="false" type="org.robotlegs.core:IEventMap" inheritDoc="false" only="read">
                     <description><![CDATA[
   Local EventMap
      ]]></description>
                     <shortDescription><![CDATA[
   Local EventMap
      ]]></shortDescription>
                     <versions/>
                     <classRef name="IEventMap" fullName="org.robotlegs.core:IEventMap" packageName="org.robotlegs.core" relativePath="../core/IEventMap.html"/>
                  </field>
               </fields>
            </asClass>
            <asClass name="Command" type="class" fullname="org.robotlegs.mvcs:Command" accessLevel="public" isFinal="false" isDynamic="false" packageName="org.robotlegs.mvcs" path="" relativePath="../" href="" taghref="" inheritDoc="false">
               <description><![CDATA[
  Abstract MVCS command implementation
  ]]></description>
               <shortDescription><![CDATA[
  Abstract MVCS command implementation
  ]]></shortDescription>
               <versions/>
               <author/>
               <asAncestors/>
               <constructors>
                  <constructor name="Command" fullname="org.robotlegs.mvcs:Command/Command" accessLevel="public" result_type="*" inheritDoc="false">
                     <versions/>
                     <result type="*"/>
                  </constructor>
               </constructors>
               <methods>
                  <method name="dispatch" fullname="org.robotlegs.mvcs:Command/protected:dispatch" accessLevel="protected" result_type="Boolean" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   Dispatch helper method
      ]]></description>
                     <shortDescription><![CDATA[
   Dispatch helper method
      ]]></shortDescription>
                     <versions/>
                     <result type="Boolean"/>
                     <params>
                        <param name="event" type="flash.events:Event">
                           <description><![CDATA[The <code>Event</code> to dispatch on the <code>IContext</code>'s <code>IEventDispatcher</code>
   ]]></description>
                        </param>
                     </params>
                  </method>
                  <method name="execute" fullname="org.robotlegs.mvcs:Command/execute" accessLevel="public" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   ]]></description>
                     <shortDescription><![CDATA[
   ]]></shortDescription>
                     <versions/>
                     <result type="void"/>
                  </method>
               </methods>
               <fields>
                  <field name="commandMap" fullname="org.robotlegs.mvcs:Command/commandMap" accessLevel="public" type="org.robotlegs.core:ICommandMap" isConst="false" isStatic="false">
                     <classRef name="ICommandMap" fullName="org.robotlegs.core:ICommandMap" packageName="org.robotlegs.core" relativePath="../core/ICommandMap.html"/>
                     <versions/>
                  </field>
                  <field name="contextView" fullname="org.robotlegs.mvcs:Command/contextView" accessLevel="public" type="flash.display:DisplayObjectContainer" isConst="false" isStatic="false">
                     <versions/>
                  </field>
                  <field name="eventDispatcher" fullname="org.robotlegs.mvcs:Command/eventDispatcher" accessLevel="public" type="flash.events:IEventDispatcher" isConst="false" isStatic="false">
                     <versions/>
                  </field>
                  <field name="injector" fullname="org.robotlegs.mvcs:Command/injector" accessLevel="public" type="org.robotlegs.core:IInjector" isConst="false" isStatic="false">
                     <classRef name="IInjector" fullName="org.robotlegs.core:IInjector" packageName="org.robotlegs.core" relativePath="../core/IInjector.html"/>
                     <versions/>
                  </field>
                  <field name="mediatorMap" fullname="org.robotlegs.mvcs:Command/mediatorMap" accessLevel="public" type="org.robotlegs.core:IMediatorMap" isConst="false" isStatic="false">
                     <classRef name="IMediatorMap" fullName="org.robotlegs.core:IMediatorMap" packageName="org.robotlegs.core" relativePath="../core/IMediatorMap.html"/>
                     <versions/>
                  </field>
               </fields>
            </asClass>
         </classes>
      </asPackage>
      <asPackage name="org.robotlegs.core">
         <classes>
            <asClass name="IMediator" type="interface" fullname="org.robotlegs.core:IMediator" accessLevel="public" isFinal="false" isDynamic="false" packageName="org.robotlegs.core" path="" relativePath="../" href="" taghref="" inheritDoc="false">
               <description><![CDATA[
  The Robotlegs Mediator contract
  ]]></description>
               <shortDescription><![CDATA[
  The Robotlegs Mediator contract
  ]]></shortDescription>
               <versions/>
               <author/>
               <implementers>
                  <classRef name="MediatorMap" fullName="org.robotlegs.base:MediatorMap" packageName="org.robotlegs.base" relativePath="../base/MediatorMap.html"/>
                  <classRef name="MediatorBase" fullName="org.robotlegs.base:MediatorBase" packageName="org.robotlegs.base" relativePath="../base/MediatorBase.html"/>
               </implementers>
               <asAncestors/>
               <methods>
                  <method name="getViewComponent" fullname="org.robotlegs.core:IMediator/org.robotlegs.core:IMediator:getViewComponent" accessLevel="public" result_type="Object" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   The <code>IMediator</code>'s view component
      ]]></description>
                     <shortDescription><![CDATA[
   The <code>IMediator</code>'s view component
      ]]></shortDescription>
                     <versions/>
                     <result type="Object"><![CDATA[The view component
   ]]></result>
                  </method>
                  <method name="onRegister" fullname="org.robotlegs.core:IMediator/org.robotlegs.core:IMediator:onRegister" accessLevel="public" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   Should be invoked by the <code>IMediator</code> itself when it is ready to be interacted with
      <p>Override and place your initialization code here</p>
   ]]></description>
                     <shortDescription><![CDATA[
   Should be invoked by the <code>IMediator</code> itself when it is ready to be interacted with
      <p>Override and place your initialization code here</p>
   ]]></shortDescription>
                     <versions/>
                     <result type="void"/>
                  </method>
                  <method name="onRemove" fullname="org.robotlegs.core:IMediator/org.robotlegs.core:IMediator:onRemove" accessLevel="public" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   Should be invoked by the <code>IMediator</code> itself when it is ready to for cleanup
      <p>Override and place your cleanup code here</p>
   ]]></description>
                     <shortDescription><![CDATA[
   Should be invoked by the <code>IMediator</code> itself when it is ready to for cleanup
      <p>Override and place your cleanup code here</p>
   ]]></shortDescription>
                     <versions/>
                     <result type="void"/>
                  </method>
                  <method name="preRegister" fullname="org.robotlegs.core:IMediator/org.robotlegs.core:IMediator:preRegister" accessLevel="public" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   Should be invoked by the <code>IMediatorMap</code> during <code>IMediator</code> registration
   ]]></description>
                     <shortDescription><![CDATA[
   Should be invoked by the <code>IMediatorMap</code> during <code>IMediator</code> registration
   ]]></shortDescription>
                     <versions/>
                     <result type="void"/>
                  </method>
                  <method name="preRemove" fullname="org.robotlegs.core:IMediator/org.robotlegs.core:IMediator:preRemove" accessLevel="public" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   Invoked when the <code>IMediator</code> has been removed by the <code>IMediatorMap</code>
   ]]></description>
                     <shortDescription><![CDATA[
   Invoked when the <code>IMediator</code> has been removed by the <code>IMediatorMap</code>
   ]]></shortDescription>
                     <versions/>
                     <result type="void"/>
                  </method>
                  <method name="setViewComponent" fullname="org.robotlegs.core:IMediator/org.robotlegs.core:IMediator:setViewComponent" accessLevel="public" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   The <code>IMediator</code>'s view component
      ]]></description>
                     <shortDescription><![CDATA[
   The <code>IMediator</code>'s view component
      ]]></shortDescription>
                     <versions/>
                     <result type="void"/>
                     <params>
                        <param name="viewComponent" type="Object">
                           <description><![CDATA[view component
   ]]></description>
                        </param>
                     </params>
                  </method>
               </methods>
            </asClass>
            <asClass name="IEventMap" type="interface" fullname="org.robotlegs.core:IEventMap" accessLevel="public" isFinal="false" isDynamic="false" packageName="org.robotlegs.core" path="" relativePath="../" href="" taghref="" inheritDoc="false">
               <description><![CDATA[
  The Robotlegs EventMap contract
  ]]></description>
               <shortDescription><![CDATA[
  The Robotlegs EventMap contract
  ]]></shortDescription>
               <versions/>
               <author/>
               <implementers>
                  <classRef name="EventMap" fullName="org.robotlegs.base:EventMap" packageName="org.robotlegs.base" relativePath="../base/EventMap.html"/>
               </implementers>
               <asAncestors/>
               <methods>
                  <method name="mapListener" fullname="org.robotlegs.core:IEventMap/org.robotlegs.core:IEventMap:mapListener" accessLevel="public" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   The same as calling <code>addEventListener</code> directly on the <code>IEventDispatcher</code>,
   but keeps a list of listeners for easy (usually automatic) removal.
      ]]></description>
                     <shortDescription><![CDATA[
   The same as calling <code>addEventListener</code> directly on the <code>IEventDispatcher</code>,
   but keeps a list of listeners for easy (usually automatic) removal.]]></shortDescription>
                     <versions/>
                     <result type="void"/>
                     <params>
                        <param name="dispatcher" type="flash.events:IEventDispatcher">
                           <description><![CDATA[The <code>IEventDispatcher</code> to listen to
   ]]></description>
                        </param>
                        <param name="type" type="String">
                           <description><![CDATA[The <code>Event</code> type to listen for
   ]]></description>
                        </param>
                        <param name="listener" type="Function">
                           <description><![CDATA[The <code>Event</code> handler
   ]]></description>
                        </param>
                        <param name="eventClass" type="Class" default="null">
                           <description><![CDATA[Optional Event class for a stronger mapping. Defaults to <code>flash.events.Event</code>.
   ]]></description>
                        </param>
                        <param name="useCapture" type="Boolean" default="false">
                           <description><![CDATA[  ]]></description>
                        </param>
                        <param name="priority" type="int" default="0">
                           <description><![CDATA[  ]]></description>
                        </param>
                        <param name="useWeakReference" type="Boolean" default="true">
                           <description><![CDATA[  ]]></description>
                        </param>
                     </params>
                  </method>
                  <method name="unmapListener" fullname="org.robotlegs.core:IEventMap/org.robotlegs.core:IEventMap:unmapListener" accessLevel="public" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   The same as calling <code>removeEventListener</code> directly on the <code>IEventDispatcher</code>,
   but updates our local list of listeners.
      ]]></description>
                     <shortDescription><![CDATA[
   The same as calling <code>removeEventListener</code> directly on the <code>IEventDispatcher</code>,
   but updates our local list of listeners.]]></shortDescription>
                     <versions/>
                     <result type="void"/>
                     <params>
                        <param name="dispatcher" type="flash.events:IEventDispatcher">
                           <description><![CDATA[The <code>IEventDispatcher</code>
   ]]></description>
                        </param>
                        <param name="type" type="String">
                           <description><![CDATA[The <code>Event</code> type
   ]]></description>
                        </param>
                        <param name="listener" type="Function">
                           <description><![CDATA[The <code>Event</code> handler
   ]]></description>
                        </param>
                        <param name="eventClass" type="Class" default="null">
                           <description><![CDATA[Optional Event class for a stronger mapping. Defaults to <code>flash.events.Event</code>.
   ]]></description>
                        </param>
                        <param name="useCapture" type="Boolean" default="false">
                           <description><![CDATA[  ]]></description>
                        </param>
                     </params>
                  </method>
                  <method name="unmapListeners" fullname="org.robotlegs.core:IEventMap/org.robotlegs.core:IEventMap:unmapListeners" accessLevel="public" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   Removes all listeners registered through <code>mapListener</code>
   ]]></description>
                     <shortDescription><![CDATA[
   Removes all listeners registered through <code>mapListener</code>
   ]]></shortDescription>
                     <versions/>
                     <result type="void"/>
                  </method>
               </methods>
            </asClass>
            <asClass name="ICommandMap" type="interface" fullname="org.robotlegs.core:ICommandMap" accessLevel="public" isFinal="false" isDynamic="false" packageName="org.robotlegs.core" path="" relativePath="../" href="" taghref="" inheritDoc="false">
               <description><![CDATA[
  The Robotlegs CommandMap contract
  ]]></description>
               <shortDescription><![CDATA[
  The Robotlegs CommandMap contract
  ]]></shortDescription>
               <versions/>
               <author/>
               <implementers>
                  <classRef name="CommandMap" fullName="org.robotlegs.base:CommandMap" packageName="org.robotlegs.base" relativePath="../base/CommandMap.html"/>
               </implementers>
               <asAncestors/>
               <methods>
                  <method name="detain" fullname="org.robotlegs.core:ICommandMap/org.robotlegs.core:ICommandMap:detain" accessLevel="public" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   Detain a Command instance
   
   ]]></description>
                     <shortDescription><![CDATA[
   Detain a Command instance
   
   ]]></shortDescription>
                     <versions/>
                     <result type="void"/>
                     <params>
                        <param name="command" type="Object">
                           <description><![CDATA[The Command instance to detain
   ]]></description>
                        </param>
                     </params>
                  </method>
                  <method name="execute" fullname="org.robotlegs.core:ICommandMap/org.robotlegs.core:ICommandMap:execute" accessLevel="public" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <canThrow>
                        <description><![CDATA[  ]]></description>
                     </canThrow>
                     <description><![CDATA[
   Execute a Command with an optional payload
   
   <p>The <code>commandClass</code> must implement an execute() method</p>
   
   ]]></description>
                     <shortDescription><![CDATA[
   Execute a Command with an optional payload
   
   <p>The <code>commandClass</code> must implement an execute() method</p>
   
   ]]></shortDescription>
                     <versions/>
                     <result type="void"/>
                     <params>
                        <param name="commandClass" type="Class">
                           <description><![CDATA[The Class to instantiate - must have an execute() method
   ]]></description>
                        </param>
                        <param name="payload" type="Object" default="null">
                           <description><![CDATA[An optional payload
   ]]></description>
                        </param>
                        <param name="payloadClass" type="Class" default="null">
                           <description><![CDATA[ An optional class to inject the payload as
   ]]></description>
                        </param>
                        <param name="named" type="String" default="">
                           <description><![CDATA[An optional name for the payload injection
   
   ]]></description>
                        </param>
                     </params>
                  </method>
                  <method name="hasEventCommand" fullname="org.robotlegs.core:ICommandMap/org.robotlegs.core:ICommandMap:hasEventCommand" accessLevel="public" result_type="Boolean" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   Check if a Class has been mapped to an Event type
      ]]></description>
                     <shortDescription><![CDATA[
   Check if a Class has been mapped to an Event type
      ]]></shortDescription>
                     <versions/>
                     <result type="Boolean"><![CDATA[Whether the Class is mapped to this Event type
   ]]></result>
                     <params>
                        <param name="eventType" type="String">
                           <description><![CDATA[The Event type
   ]]></description>
                        </param>
                        <param name="commandClass" type="Class">
                           <description><![CDATA[The Class
   ]]></description>
                        </param>
                        <param name="eventClass" type="Class" default="null">
                           <description><![CDATA[Optional Event class for a stronger mapping. Defaults to <code>flash.events.Event</code>.
   ]]></description>
                        </param>
                     </params>
                  </method>
                  <method name="mapEvent" fullname="org.robotlegs.core:ICommandMap/org.robotlegs.core:ICommandMap:mapEvent" accessLevel="public" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <canThrow>
                        <description><![CDATA[  ]]></description>
                     </canThrow>
                     <description><![CDATA[
   Map a Class to an Event type
   
   <p>The <code>commandClass</code> must implement an execute() method</p>
   
   ]]></description>
                     <shortDescription><![CDATA[
   Map a Class to an Event type
   
   <p>The <code>commandClass</code> must implement an execute() method</p>
   
   ]]></shortDescription>
                     <versions/>
                     <result type="void"/>
                     <params>
                        <param name="eventType" type="String">
                           <description><![CDATA[The Event type to listen for
   ]]></description>
                        </param>
                        <param name="commandClass" type="Class">
                           <description><![CDATA[The Class to instantiate - must have an execute() method
   ]]></description>
                        </param>
                        <param name="eventClass" type="Class" default="null">
                           <description><![CDATA[Optional Event class for a stronger mapping. Defaults to <code>flash.events.Event</code>. Your commandClass can optionally [Inject] a variable of this type to access the event that triggered the command.
   ]]></description>
                        </param>
                        <param name="oneshot" type="Boolean" default="false">
                           <description><![CDATA[Unmap the Class after execution?
   
   ]]></description>
                        </param>
                     </params>
                  </method>
                  <method name="release" fullname="org.robotlegs.core:ICommandMap/org.robotlegs.core:ICommandMap:release" accessLevel="public" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   Release a Command instance
   
   ]]></description>
                     <shortDescription><![CDATA[
   Release a Command instance
   
   ]]></shortDescription>
                     <versions/>
                     <result type="void"/>
                     <params>
                        <param name="command" type="Object">
                           <description><![CDATA[The Command instance to release for garbage collection
   ]]></description>
                        </param>
                     </params>
                  </method>
                  <method name="unmapEvent" fullname="org.robotlegs.core:ICommandMap/org.robotlegs.core:ICommandMap:unmapEvent" accessLevel="public" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   Unmap a Class to Event type mapping
      ]]></description>
                     <shortDescription><![CDATA[
   Unmap a Class to Event type mapping
      ]]></shortDescription>
                     <versions/>
                     <result type="void"/>
                     <params>
                        <param name="eventType" type="String">
                           <description><![CDATA[The Event type
   ]]></description>
                        </param>
                        <param name="commandClass" type="Class">
                           <description><![CDATA[The Class to unmap
   ]]></description>
                        </param>
                        <param name="eventClass" type="Class" default="null">
                           <description><![CDATA[Optional Event class for a stronger mapping. Defaults to <code>flash.events.Event</code>.
   ]]></description>
                        </param>
                     </params>
                  </method>
                  <method name="unmapEvents" fullname="org.robotlegs.core:ICommandMap/org.robotlegs.core:ICommandMap:unmapEvents" accessLevel="public" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   Removes all mappings made through <code>mapEvent</code>
   ]]></description>
                     <shortDescription><![CDATA[
   Removes all mappings made through <code>mapEvent</code>
   ]]></shortDescription>
                     <versions/>
                     <result type="void"/>
                  </method>
               </methods>
            </asClass>
            <asClass name="IReflector" type="interface" fullname="org.robotlegs.core:IReflector" accessLevel="public" isFinal="false" isDynamic="false" packageName="org.robotlegs.core" path="" relativePath="../" href="" taghref="" inheritDoc="false">
               <description><![CDATA[
  The Robotlegs Reflector contract
  ]]></description>
               <shortDescription><![CDATA[
  The Robotlegs Reflector contract
  ]]></shortDescription>
               <versions/>
               <author/>
               <implementers>
                  <classRef name="SwiftSuspendersReflector" fullName="org.robotlegs.adapters:SwiftSuspendersReflector" packageName="org.robotlegs.adapters" relativePath="../adapters/SwiftSuspendersReflector.html"/>
               </implementers>
               <asAncestors/>
               <methods>
                  <method name="classExtendsOrImplements" fullname="org.robotlegs.core:IReflector/org.robotlegs.core:IReflector:classExtendsOrImplements" accessLevel="public" result_type="Boolean" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   Does this class or class name implement this superclass or interface?
   
   ]]></description>
                     <shortDescription><![CDATA[
   Does this class or class name implement this superclass or interface?
   
   ]]></shortDescription>
                     <versions/>
                     <result type="Boolean"><![CDATA[Boolean
   ]]></result>
                     <params>
                        <param name="classOrClassName" type="Object">
                           <description><![CDATA[  ]]></description>
                        </param>
                        <param name="superclass" type="Class">
                           <description><![CDATA[  ]]></description>
                        </param>
                        <param name="applicationDomain" type="flash.system:ApplicationDomain" default="null">
                           <description><![CDATA[  ]]></description>
                        </param>
                     </params>
                  </method>
                  <method name="getClass" fullname="org.robotlegs.core:IReflector/org.robotlegs.core:IReflector:getClass" accessLevel="public" result_type="Class" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   Get the class of this instance
   
   ]]></description>
                     <shortDescription><![CDATA[
   Get the class of this instance
   
   ]]></shortDescription>
                     <versions/>
                     <result type="Class"><![CDATA[Class
   ]]></result>
                     <params>
                        <param name="value" type="">
                           <description><![CDATA[The instance
   ]]></description>
                        </param>
                        <param name="applicationDomain" type="flash.system:ApplicationDomain" default="null">
                           <description><![CDATA[  ]]></description>
                        </param>
                     </params>
                  </method>
                  <method name="getFQCN" fullname="org.robotlegs.core:IReflector/org.robotlegs.core:IReflector:getFQCN" accessLevel="public" result_type="String" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   Get the Fully Qualified Class Name of this instance, class name, or class
   
   ]]></description>
                     <shortDescription><![CDATA[
   Get the Fully Qualified Class Name of this instance, class name, or class
   
   ]]></shortDescription>
                     <versions/>
                     <result type="String"><![CDATA[The Fully Qualified Class Name
   ]]></result>
                     <params>
                        <param name="value" type="">
                           <description><![CDATA[The instance, class name, or class
   ]]></description>
                        </param>
                        <param name="replaceColons" type="Boolean" default="false">
                           <description><![CDATA[  ]]></description>
                        </param>
                     </params>
                  </method>
               </methods>
            </asClass>
            <asClass name="IViewMap" type="interface" fullname="org.robotlegs.core:IViewMap" accessLevel="public" isFinal="false" isDynamic="false" packageName="org.robotlegs.core" path="" relativePath="../" href="" taghref="" inheritDoc="false">
               <description><![CDATA[
  The Robotlegs ViewMap contract. All IViewMap automatic injections occur AFTER the view components are added to the stage.
  ]]></description>
               <shortDescription><![CDATA[
  The Robotlegs ViewMap contract.]]></shortDescription>
               <versions/>
               <author/>
               <implementers>
                  <classRef name="ViewMap" fullName="org.robotlegs.base:ViewMap" packageName="org.robotlegs.base" relativePath="../base/ViewMap.html"/>
               </implementers>
               <asAncestors/>
               <methods>
                  <method name="hasPackage" fullname="org.robotlegs.core:IViewMap/org.robotlegs.core:IViewMap:hasPackage" accessLevel="public" result_type="Boolean" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   Check if a package has been registered for automatic injection
      ]]></description>
                     <shortDescription><![CDATA[
   Check if a package has been registered for automatic injection
      ]]></shortDescription>
                     <versions/>
                     <result type="Boolean"><![CDATA[Whether a package has been registered for automatic injection
   ]]></result>
                     <params>
                        <param name="packageName" type="String">
                           <description><![CDATA[The substring to compare
   ]]></description>
                        </param>
                     </params>
                  </method>
                  <method name="hasType" fullname="org.robotlegs.core:IViewMap/org.robotlegs.core:IViewMap:hasType" accessLevel="public" result_type="Boolean" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   Check if a class or interface has been registered for automatic injection
      ]]></description>
                     <shortDescription><![CDATA[
   Check if a class or interface has been registered for automatic injection
      ]]></shortDescription>
                     <versions/>
                     <result type="Boolean"><![CDATA[Whether an interface has been registered for automatic injection
   ]]></result>
                     <params>
                        <param name="type" type="Class">
                           <description><![CDATA[The concrete view interface 
   ]]></description>
                        </param>
                     </params>
                  </method>
                  <method name="mapPackage" fullname="org.robotlegs.core:IViewMap/org.robotlegs.core:IViewMap:mapPackage" accessLevel="public" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   Map an entire package (including sub-packages) for automatic injection
   
   ]]></description>
                     <shortDescription><![CDATA[
   Map an entire package (including sub-packages) for automatic injection
   
   ]]></shortDescription>
                     <versions/>
                     <result type="void"/>
                     <params>
                        <param name="packageName" type="String">
                           <description><![CDATA[The substring to compare
   ]]></description>
                        </param>
                     </params>
                  </method>
                  <method name="mapType" fullname="org.robotlegs.core:IViewMap/org.robotlegs.core:IViewMap:mapType" accessLevel="public" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   Map a view component class or interface for automatic injection
      ]]></description>
                     <shortDescription><![CDATA[
   Map a view component class or interface for automatic injection
      ]]></shortDescription>
                     <versions/>
                     <result type="void"/>
                     <params>
                        <param name="type" type="Class">
                           <description><![CDATA[The concrete view Interface
   ]]></description>
                        </param>
                     </params>
                  </method>
                  <method name="unmapPackage" fullname="org.robotlegs.core:IViewMap/org.robotlegs.core:IViewMap:unmapPackage" accessLevel="public" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   Unmap a package
   
   ]]></description>
                     <shortDescription><![CDATA[
   Unmap a package
   
   ]]></shortDescription>
                     <versions/>
                     <result type="void"/>
                     <params>
                        <param name="packageName" type="String">
                           <description><![CDATA[The substring to compare
   ]]></description>
                        </param>
                     </params>
                  </method>
                  <method name="unmapType" fullname="org.robotlegs.core:IViewMap/org.robotlegs.core:IViewMap:unmapType" accessLevel="public" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   Unmap a view component class or interface
      ]]></description>
                     <shortDescription><![CDATA[
   Unmap a view component class or interface
      ]]></shortDescription>
                     <versions/>
                     <result type="void"/>
                     <params>
                        <param name="type" type="Class">
                           <description><![CDATA[The concrete view Interface
   ]]></description>
                        </param>
                     </params>
                  </method>
               </methods>
               <fields>
                  <field name="contextView" fullname="org.robotlegs.core:IViewMap/org.robotlegs.core:IViewMap:contextView/get" accessLevel="public" isConst="false" isStatic="false" type="flash.display:DisplayObjectContainer" inheritDoc="false" only="read-write">
                     <description><![CDATA[
   The <code>IViewMap</code>'s <code>DisplayObjectContainer</code>
      ]]></description>
                     <shortDescription><![CDATA[
   The <code>IViewMap</code>'s <code>DisplayObjectContainer</code>
      ]]></shortDescription>
                     <versions/>
                  </field>
                  <field name="enabled" fullname="org.robotlegs.core:IViewMap/org.robotlegs.core:IViewMap:enabled/get" accessLevel="public" isConst="false" isStatic="false" type="Boolean" inheritDoc="false" only="read-write">
                     <description><![CDATA[
   The <code>IViewMap</code>'s enabled status
      ]]></description>
                     <shortDescription><![CDATA[
   The <code>IViewMap</code>'s enabled status
      ]]></shortDescription>
                     <versions/>
                  </field>
               </fields>
            </asClass>
            <asClass name="IMediatorMap" type="interface" fullname="org.robotlegs.core:IMediatorMap" accessLevel="public" isFinal="false" isDynamic="false" packageName="org.robotlegs.core" path="" relativePath="../" href="" taghref="" inheritDoc="false">
               <description><![CDATA[
  The Robotlegs MediatorMap contract
  ]]></description>
               <shortDescription><![CDATA[
  The Robotlegs MediatorMap contract
  ]]></shortDescription>
               <versions/>
               <author/>
               <implementers>
                  <classRef name="MediatorMap" fullName="org.robotlegs.base:MediatorMap" packageName="org.robotlegs.base" relativePath="../base/MediatorMap.html"/>
               </implementers>
               <asAncestors/>
               <methods>
                  <method name="createMediator" fullname="org.robotlegs.core:IMediatorMap/org.robotlegs.core:IMediatorMap:createMediator" accessLevel="public" result_type="org.robotlegs.core:IMediator" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   Create an instance of a mapped <code>IMediator</code>
      <p>This will instantiate and register a Mediator for a given View Component.
   Mediator dependencies will be automatically resolved.</p>
      ]]></description>
                     <shortDescription><![CDATA[
   Create an instance of a mapped <code>IMediator</code>
      <p>This will instantiate and register a Mediator for a given View Component.]]></shortDescription>
                     <versions/>
                     <result type="org.robotlegs.core:IMediator">
                        <![CDATA[The <code>IMediator</code>
   ]]>
                        <classRef name="IMediator" fullName="org.robotlegs.core:IMediator" packageName="org.robotlegs.core" relativePath="../core/IMediator.html"/>
                     </result>
                     <params>
                        <param name="viewComponent" type="Object">
                           <description><![CDATA[An instance of the view Class previously mapped to an <code>IMediator</code> Class
   ]]></description>
                        </param>
                     </params>
                  </method>
                  <method name="hasMediator" fullname="org.robotlegs.core:IMediatorMap/org.robotlegs.core:IMediatorMap:hasMediator" accessLevel="public" result_type="Boolean" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   Check if the <code>IMediator</code> has been registered
      ]]></description>
                     <shortDescription><![CDATA[
   Check if the <code>IMediator</code> has been registered
      ]]></shortDescription>
                     <versions/>
                     <result type="Boolean"><![CDATA[Whether this <code>IMediator</code> has been registered
   ]]></result>
                     <params>
                        <param name="mediator" type="org.robotlegs.core:IMediator">
                           <classRef name="IMediator" fullName="org.robotlegs.core:IMediator" packageName="org.robotlegs.core" relativePath="IMediator.html"/>
                           <description><![CDATA[The <code>IMediator</code> instance
   ]]></description>
                        </param>
                     </params>
                  </method>
                  <method name="hasMediatorForView" fullname="org.robotlegs.core:IMediatorMap/org.robotlegs.core:IMediatorMap:hasMediatorForView" accessLevel="public" result_type="Boolean" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   Check if an <code>IMediator</code> has been registered for a view instance
      ]]></description>
                     <shortDescription><![CDATA[
   Check if an <code>IMediator</code> has been registered for a view instance
      ]]></shortDescription>
                     <versions/>
                     <result type="Boolean"><![CDATA[Whether an <code>IMediator</code> has been registered for this view instance
   ]]></result>
                     <params>
                        <param name="viewComponent" type="Object">
                           <description><![CDATA[The view that the <code>IMediator</code> was registered with
   ]]></description>
                        </param>
                     </params>
                  </method>
                  <method name="mapView" fullname="org.robotlegs.core:IMediatorMap/org.robotlegs.core:IMediatorMap:mapView" accessLevel="public" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   Map an <code>IMediator</code> to a view Class
      ]]></description>
                     <shortDescription><![CDATA[
   Map an <code>IMediator</code> to a view Class
      ]]></shortDescription>
                     <versions/>
                     <result type="void"/>
                     <params>
                        <param name="viewClassOrName" type="">
                           <description><![CDATA[The concrete view Class or Fully Qualified Class Name
   ]]></description>
                        </param>
                        <param name="mediatorClass" type="Class">
                           <description><![CDATA[The <code>IMediator</code> Class
   ]]></description>
                        </param>
                        <param name="injectViewAs" type="Class" default="null">
                           <description><![CDATA[The explicit view Interface or Class that the mediator depends on
   ]]></description>
                        </param>
                        <param name="autoCreate" type="Boolean" default="true">
                           <description><![CDATA[Automatically construct and register an instance of Class <code>mediatorClass</code> when an instance of Class <code>viewClass</code> is detected
   ]]></description>
                        </param>
                        <param name="autoRemove" type="Boolean" default="true">
                           <description><![CDATA[Automatically remove an instance of Class <code>mediatorClass</code> when it's <code>viewClass</code> leaves the ancestory of the context view
   ]]></description>
                        </param>
                     </params>
                  </method>
                  <method name="registerMediator" fullname="org.robotlegs.core:IMediatorMap/org.robotlegs.core:IMediatorMap:registerMediator" accessLevel="public" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   Manually register an <code>IMediator</code> instance
      <p>NOTE: Registering a Mediator will NOT inject it's dependencies.
   It is assumed that dependencies are already satisfied.</p>
      ]]></description>
                     <shortDescription><![CDATA[
   Manually register an <code>IMediator</code> instance
      <p>NOTE: Registering a Mediator will NOT inject it's dependencies.]]></shortDescription>
                     <versions/>
                     <result type="void"/>
                     <params>
                        <param name="viewComponent" type="Object">
                           <description><![CDATA[The view component for the <code>IMediator</code>
   ]]></description>
                        </param>
                        <param name="mediator" type="org.robotlegs.core:IMediator">
                           <classRef name="IMediator" fullName="org.robotlegs.core:IMediator" packageName="org.robotlegs.core" relativePath="IMediator.html"/>
                           <description><![CDATA[The <code>IMediator</code> to register
   ]]></description>
                        </param>
                     </params>
                  </method>
                  <method name="removeMediator" fullname="org.robotlegs.core:IMediatorMap/org.robotlegs.core:IMediatorMap:removeMediator" accessLevel="public" result_type="org.robotlegs.core:IMediator" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   Remove a registered <code>IMediator</code> instance
      ]]></description>
                     <shortDescription><![CDATA[
   Remove a registered <code>IMediator</code> instance
      ]]></shortDescription>
                     <versions/>
                     <result type="org.robotlegs.core:IMediator">
                        <![CDATA[The <code>IMediator</code> that was removed
   ]]>
                        <classRef name="IMediator" fullName="org.robotlegs.core:IMediator" packageName="org.robotlegs.core" relativePath="../core/IMediator.html"/>
                     </result>
                     <params>
                        <param name="mediator" type="org.robotlegs.core:IMediator">
                           <classRef name="IMediator" fullName="org.robotlegs.core:IMediator" packageName="org.robotlegs.core" relativePath="IMediator.html"/>
                           <description><![CDATA[The <code>IMediator</code> to remove
   ]]></description>
                        </param>
                     </params>
                  </method>
                  <method name="removeMediatorByView" fullname="org.robotlegs.core:IMediatorMap/org.robotlegs.core:IMediatorMap:removeMediatorByView" accessLevel="public" result_type="org.robotlegs.core:IMediator" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   Remove a registered <code>IMediator</code> instance
      ]]></description>
                     <shortDescription><![CDATA[
   Remove a registered <code>IMediator</code> instance
      ]]></shortDescription>
                     <versions/>
                     <result type="org.robotlegs.core:IMediator">
                        <![CDATA[The <code>IMediator</code> that was removed
   ]]>
                        <classRef name="IMediator" fullName="org.robotlegs.core:IMediator" packageName="org.robotlegs.core" relativePath="../core/IMediator.html"/>
                     </result>
                     <params>
                        <param name="viewComponent" type="Object">
                           <description><![CDATA[The view that the <code>IMediator</code> was registered with
   ]]></description>
                        </param>
                     </params>
                  </method>
                  <method name="retrieveMediator" fullname="org.robotlegs.core:IMediatorMap/org.robotlegs.core:IMediatorMap:retrieveMediator" accessLevel="public" result_type="org.robotlegs.core:IMediator" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   Retrieve a registered <code>IMediator</code> instance
      ]]></description>
                     <shortDescription><![CDATA[
   Retrieve a registered <code>IMediator</code> instance
      ]]></shortDescription>
                     <versions/>
                     <result type="org.robotlegs.core:IMediator">
                        <![CDATA[The <code>IMediator</code>
   ]]>
                        <classRef name="IMediator" fullName="org.robotlegs.core:IMediator" packageName="org.robotlegs.core" relativePath="../core/IMediator.html"/>
                     </result>
                     <params>
                        <param name="viewComponent" type="Object">
                           <description><![CDATA[The view that the <code>IMediator</code> was registered with
   ]]></description>
                        </param>
                     </params>
                  </method>
                  <method name="unmapView" fullname="org.robotlegs.core:IMediatorMap/org.robotlegs.core:IMediatorMap:unmapView" accessLevel="public" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   Unmap a view Class
    
   ]]></description>
                     <shortDescription><![CDATA[
   Unmap a view Class
    
   ]]></shortDescription>
                     <versions/>
                     <result type="void"/>
                     <params>
                        <param name="viewClassOrName" type="">
                           <description><![CDATA[The concrete view Class or Fully Qualified Class Name
   ]]></description>
                        </param>
                     </params>
                  </method>
               </methods>
               <fields>
                  <field name="contextView" fullname="org.robotlegs.core:IMediatorMap/org.robotlegs.core:IMediatorMap:contextView/get" accessLevel="public" isConst="false" isStatic="false" type="flash.display:DisplayObjectContainer" inheritDoc="false" only="read-write">
                     <description><![CDATA[
   The <code>IMediatorMap</code>'s <code>DisplayObjectContainer</code>
      ]]></description>
                     <shortDescription><![CDATA[
   The <code>IMediatorMap</code>'s <code>DisplayObjectContainer</code>
      ]]></shortDescription>
                     <versions/>
                  </field>
                  <field name="enabled" fullname="org.robotlegs.core:IMediatorMap/org.robotlegs.core:IMediatorMap:enabled/get" accessLevel="public" isConst="false" isStatic="false" type="Boolean" inheritDoc="false" only="read-write">
                     <description><![CDATA[
   The <code>IMediatorMap</code>'s enabled status
   
   ]]></description>
                     <shortDescription><![CDATA[
   The <code>IMediatorMap</code>'s enabled status
   
   ]]></shortDescription>
                     <versions/>
                  </field>
               </fields>
            </asClass>
            <asClass name="IInjector" type="interface" fullname="org.robotlegs.core:IInjector" accessLevel="public" isFinal="false" isDynamic="false" packageName="org.robotlegs.core" path="" relativePath="../" href="" taghref="" inheritDoc="false">
               <description><![CDATA[
  The Robotlegs Injector contract
  ]]></description>
               <shortDescription><![CDATA[
  The Robotlegs Injector contract
  ]]></shortDescription>
               <versions/>
               <author/>
               <implementers>
                  <classRef name="SwiftSuspendersInjector" fullName="org.robotlegs.adapters:SwiftSuspendersInjector" packageName="org.robotlegs.adapters" relativePath="../adapters/SwiftSuspendersInjector.html"/>
               </implementers>
               <asAncestors/>
               <methods>
                  <method name="createChild" fullname="org.robotlegs.core:IInjector/org.robotlegs.core:IInjector:createChild" accessLevel="public" result_type="org.robotlegs.core:IInjector" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   Create an injector that inherits rules from its parent
   
   ]]></description>
                     <shortDescription><![CDATA[
   Create an injector that inherits rules from its parent
   
   ]]></shortDescription>
                     <versions/>
                     <result type="org.robotlegs.core:IInjector">
                        <![CDATA[The injector 
   ]]>
                        <classRef name="IInjector" fullName="org.robotlegs.core:IInjector" packageName="org.robotlegs.core" relativePath="../core/IInjector.html"/>
                     </result>
                     <params>
                        <param name="applicationDomain" type="flash.system:ApplicationDomain" default="null"/>
                     </params>
                  </method>
                  <method name="getInstance" fullname="org.robotlegs.core:IInjector/org.robotlegs.core:IInjector:getInstance" accessLevel="public" result_type="*" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   Create or retrieve an instance of the given class
   
   ]]></description>
                     <shortDescription><![CDATA[
   Create or retrieve an instance of the given class
   
   ]]></shortDescription>
                     <versions/>
                     <result type="*"><![CDATA[An instance
   ]]></result>
                     <params>
                        <param name="clazz" type="Class">
                           <description><![CDATA[  ]]></description>
                        </param>
                        <param name="named" type="String" default="">
                           <description><![CDATA[An optional name (id)
   ]]></description>
                        </param>
                     </params>
                  </method>
                  <method name="hasMapping" fullname="org.robotlegs.core:IInjector/org.robotlegs.core:IInjector:hasMapping" accessLevel="public" result_type="Boolean" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   Does a rule exist to satsify such a request?
   
   ]]></description>
                     <shortDescription><![CDATA[
   Does a rule exist to satsify such a request?
   
   ]]></shortDescription>
                     <versions/>
                     <result type="Boolean"><![CDATA[Whether such a mapping exists
   ]]></result>
                     <params>
                        <param name="clazz" type="Class">
                           <description><![CDATA[A class or interface
   ]]></description>
                        </param>
                        <param name="named" type="String" default="">
                           <description><![CDATA[An optional name (id)
   ]]></description>
                        </param>
                     </params>
                  </method>
                  <method name="injectInto" fullname="org.robotlegs.core:IInjector/org.robotlegs.core:IInjector:injectInto" accessLevel="public" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   Perform an injection into an object, satisfying all it's dependencies
      <p>The <code>IInjector</code> should throw an <code>Error</code>
   if it can't satisfy all dependencies of the injectee.</p>
      ]]></description>
                     <shortDescription><![CDATA[
   Perform an injection into an object, satisfying all it's dependencies
      <p>The <code>IInjector</code> should throw an <code>Error</code>
   if it can't satisfy all dependencies of the injectee.</p>
      ]]></shortDescription>
                     <versions/>
                     <result type="void"/>
                     <params>
                        <param name="target" type="Object">
                           <description><![CDATA[The object to inject into - the Injectee
   ]]></description>
                        </param>
                     </params>
                  </method>
                  <method name="instantiate" fullname="org.robotlegs.core:IInjector/org.robotlegs.core:IInjector:instantiate" accessLevel="public" result_type="*" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   Create an object of the given class, supplying its dependencies as constructor parameters
   if the used DI solution has support for constructor injection
      <p>Adapters for DI solutions that don't support constructor injection should just create a new
   instance and perform setter and/ or method injection on that.</p>
   
   <p>NOTE: This method will always create a new instance. If you need to retrieve an instance
   consider using <code>getInstance</code></p>
      <p>The <code>IInjector</code> should throw an <code>Error</code>
   if it can't satisfy all dependencies of the injectee.</p>
      ]]></description>
                     <shortDescription><![CDATA[
   Create an object of the given class, supplying its dependencies as constructor parameters
   if the used DI solution has support for constructor injection
      <p>Adapters for DI solutions that don't support constructor injection should just create a new
   instance and perform setter and/ or method injection on that.</p>
   
   <p>NOTE: This method will always create a new instance.]]></shortDescription>
                     <versions/>
                     <result type="*"><![CDATA[The created instance
   ]]></result>
                     <params>
                        <param name="clazz" type="Class">
                           <description><![CDATA[The class to instantiate
   ]]></description>
                        </param>
                     </params>
                  </method>
                  <method name="mapClass" fullname="org.robotlegs.core:IInjector/org.robotlegs.core:IInjector:mapClass" accessLevel="public" result_type="*" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   When asked for an instance of the class <code>whenAskedFor</code>
   inject a new instance of <code>instantiateClass</code>.
      <p>This will create a new instance for each injection.</p>
      ]]></description>
                     <shortDescription><![CDATA[
   When asked for an instance of the class <code>whenAskedFor</code>
   inject a new instance of <code>instantiateClass</code>.]]></shortDescription>
                     <versions/>
                     <result type="*"><![CDATA[A reference to the rule for this injection. To be used with <code>mapRule</code>
   ]]></result>
                     <params>
                        <param name="whenAskedFor" type="Class">
                           <description><![CDATA[A class or interface
   ]]></description>
                        </param>
                        <param name="instantiateClass" type="Class">
                           <description><![CDATA[A class to instantiate
   ]]></description>
                        </param>
                        <param name="named" type="String" default="">
                           <description><![CDATA[An optional name (id)
   
   ]]></description>
                        </param>
                     </params>
                  </method>
                  <method name="mapRule" fullname="org.robotlegs.core:IInjector/org.robotlegs.core:IInjector:mapRule" accessLevel="public" result_type="*" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   When asked for an instance of the class <code>whenAskedFor</code>
   use rule <code>useRule</code> to determine the correct injection.
      <p>This will use whatever injection is set by the given injection rule as created using 
   one of the other mapping methods.</p>
      ]]></description>
                     <shortDescription><![CDATA[
   When asked for an instance of the class <code>whenAskedFor</code>
   use rule <code>useRule</code> to determine the correct injection.]]></shortDescription>
                     <versions/>
                     <result type="*"><![CDATA[A reference to the rule for this injection. To be used with <code>mapRule</code>
   ]]></result>
                     <params>
                        <param name="whenAskedFor" type="Class">
                           <description><![CDATA[A class or interface
   ]]></description>
                        </param>
                        <param name="useRule" type="String">
                           <description><![CDATA[The rule to use for the injection
   ]]></description>
                        </param>
                        <param name="named" type="" default="">
                           <description><![CDATA[An optional name (id)
   
   ]]></description>
                        </param>
                     </params>
                  </method>
                  <method name="mapSingleton" fullname="org.robotlegs.core:IInjector/org.robotlegs.core:IInjector:mapSingleton" accessLevel="public" result_type="*" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   When asked for an instance of the class <code>whenAskedFor</code>
   inject an instance of <code>whenAskedFor</code>.
      <p>This will create an instance on the first injection, but
   will re-use that instance for subsequent injections.</p>
      ]]></description>
                     <shortDescription><![CDATA[
   When asked for an instance of the class <code>whenAskedFor</code>
   inject an instance of <code>whenAskedFor</code>.]]></shortDescription>
                     <versions/>
                     <result type="*"><![CDATA[A reference to the rule for this injection. To be used with <code>mapRule</code>
   ]]></result>
                     <params>
                        <param name="whenAskedFor" type="Class">
                           <description><![CDATA[A class or interface
   ]]></description>
                        </param>
                        <param name="named" type="String" default="">
                           <description><![CDATA[An optional name (id)
   
   ]]></description>
                        </param>
                     </params>
                  </method>
                  <method name="mapSingletonOf" fullname="org.robotlegs.core:IInjector/org.robotlegs.core:IInjector:mapSingletonOf" accessLevel="public" result_type="*" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   When asked for an instance of the class <code>whenAskedFor</code>
   inject an instance of <code>useSingletonOf</code>.
      <p>This will create an instance on the first injection, but
   will re-use that instance for subsequent injections.</p>
      ]]></description>
                     <shortDescription><![CDATA[
   When asked for an instance of the class <code>whenAskedFor</code>
   inject an instance of <code>useSingletonOf</code>.]]></shortDescription>
                     <versions/>
                     <result type="*"><![CDATA[A reference to the rule for this injection. To be used with <code>mapRule</code>
   ]]></result>
                     <params>
                        <param name="whenAskedFor" type="Class">
                           <description><![CDATA[A class or interface
   ]]></description>
                        </param>
                        <param name="useSingletonOf" type="Class">
                           <description><![CDATA[A class to instantiate
   ]]></description>
                        </param>
                        <param name="named" type="String" default="">
                           <description><![CDATA[An optional name (id)
   
   ]]></description>
                        </param>
                     </params>
                  </method>
                  <method name="mapValue" fullname="org.robotlegs.core:IInjector/org.robotlegs.core:IInjector:mapValue" accessLevel="public" result_type="*" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   When asked for an instance of the class <code>whenAskedFor</code>
   inject the instance <code>useValue</code>.
      <p>This is used to register an existing instance with the injector
   and treat it like a Singleton.</p>
      ]]></description>
                     <shortDescription><![CDATA[
   When asked for an instance of the class <code>whenAskedFor</code>
   inject the instance <code>useValue</code>.]]></shortDescription>
                     <versions/>
                     <result type="*"><![CDATA[A reference to the rule for this injection. To be used with <code>mapRule</code>
   ]]></result>
                     <params>
                        <param name="whenAskedFor" type="Class">
                           <description><![CDATA[A class or interface
   ]]></description>
                        </param>
                        <param name="useValue" type="Object">
                           <description><![CDATA[An instance
   ]]></description>
                        </param>
                        <param name="named" type="String" default="">
                           <description><![CDATA[An optional name (id)
   
   ]]></description>
                        </param>
                     </params>
                  </method>
                  <method name="unmap" fullname="org.robotlegs.core:IInjector/org.robotlegs.core:IInjector:unmap" accessLevel="public" result_type="void" isFinal="false" isOverride="false" isStatic="false" inheritDoc="false">
                     <description><![CDATA[
   Remove a rule from the injector
      ]]></description>
                     <shortDescription><![CDATA[
   Remove a rule from the injector
      ]]></shortDescription>
                     <versions/>
                     <result type="void"/>
                     <params>
                        <param name="clazz" type="Class">
                           <description><![CDATA[A class or interface
   ]]></description>
                        </param>
                        <param name="named" type="String" default="">
                           <description><![CDATA[An optional name (id)
   ]]></description>
                        </param>
                     </params>
                  </method>
               </methods>
            </asClass>
            <asClass name="IContext" type="interface" fullname="org.robotlegs.core:IContext" accessLevel="public" isFinal="false" isDynamic="false" packageName="org.robotlegs.core" path="" relativePath="../" href="" taghref="" inheritDoc="false">
               <description><![CDATA[
  The Robotlegs Context contract
  ]]></description>
               <shortDescription><![CDATA[
  The Robotlegs Context contract
  ]]></shortDescription>
               <versions/>
               <author/>
               <implementers>
                  <classRef name="Context" fullName="org.robotlegs.mvcs:Context" packageName="org.robotlegs.mvcs" relativePath="../mvcs/Context.html"/>
                  <classRef name="ContextBase" fullName="org.robotlegs.base:ContextBase" packageName="org.robotlegs.base" relativePath="../base/ContextBase.html"/>
               </implementers>
               <asAncestors/>
               <fields>
                  <field name="eventDispatcher" fullname="org.robotlegs.core:IContext/org.robotlegs.core:IContext:eventDispatcher/get" accessLevel="public" isConst="false" isStatic="false" type="flash.events:IEventDispatcher" inheritDoc="false" only="read">
                     <description><![CDATA[
   The <code>IContext</code>'s <code>IEventDispatcher</code>
   ]]></description>
                     <shortDescription><![CDATA[
   The <code>IContext</code>'s <code>IEventDispatcher</code>
   ]]></shortDescription>
                     <versions/>
                  </field>
               </fields>
            </asClass>
         </classes>
      </asPackage>
   </packages>
</asdoc>