<?xml version="1.0" encoding="utf-8"?>
<s:MXTreeItemRenderer xmlns:fx="http://ns.adobe.com/mxml/2009"
					  xmlns:s="library://ns.adobe.com/flex/spark"
					  xmlns:mx="library://ns.adobe.com/flex/mx"
					  creationComplete="init(event)">
	<fx:Script>
		<![CDATA[
			import com.webpluz.event.ProjectConfigEvent;
			import com.webpluz.vo.ProjectConfig;
			import com.webpluz.vo.Rule;
			
			import flash.events.Event;
			
			import mx.collections.ArrayCollection;
			import mx.core.EventPriority;
			import mx.events.CollectionEvent;
			import mx.events.FlexEvent;
			
			import spark.components.gridClasses.GridSelectionMode;
			import spark.events.GridItemEditorEvent;
			import spark.events.GridSortEvent;
			
			protected function init(event:FlexEvent):void{
				this.addEventListener(Event.CHANGE, onRuleEnableChange);
			}
			
			//update user interface when data(project config) is changed
			override public function set data(value:Object):void{
				super.data = value;
				var rules:ArrayCollection = new ArrayCollection(config.rules);
				this.labelField.text = config.name;
				this.enableField.selected = config.enable;
				this.ruleGrid.dataProvider = rules;
			}
			
			public function get config():ProjectConfig{
				return this.data as ProjectConfig;
			}
			
			//dispatch change event when user enable/disable the whole project
			protected function onProjectEnableChange(e:Event):void{
				e.stopPropagation();
				this.ruleGrid.enabled = enableField.selected;
				this.config.enable = enableField.selected;
				this.dispatchEvent(new ProjectConfigEvent(ProjectConfigEvent.CHANGE, config, config.rules, true));
			}
			
			//dispatch change event when user enable/disable replace rule
			protected function onRuleEnableChange(e:Event):void{
				e.stopPropagation();
				var itemRenderer:RuleEnableItemRenderer = e.target as RuleEnableItemRenderer;
				var changeRules:Array = itemRenderer ? [itemRenderer.rule] : [];
				this.dispatchEvent(new ProjectConfigEvent(ProjectConfigEvent.CHANGE, config, changeRules, true));
			}
			
			protected function onRuleItemEditorSave(event:GridItemEditorEvent):void{
				trace('session save');
			}
			
			protected function onRulesSortChange(event:GridSortEvent):void{
				
			}
			
		]]>
	</fx:Script>
	<fx:Declarations>
		
	</fx:Declarations>
	<s:states>
		<s:State name="normal" />
		<s:State name="hovered" />
		<s:State name="selected" />
	</s:states>
	<s:VGroup width="100%" height="100%" paddingLeft="10" paddingRight="10" paddingTop="10" paddingBottom="10">
		
		<!--- the project info and control buttons on the top -->
		<s:HGroup width="100%" verticalAlign="middle">
			<s:Rect id="indentationSpacer" width="{treeListData.indent}" percentHeight="100" alpha="0">
				<s:fill>
					<s:SolidColor color="0xFFFFFF" />
				</s:fill>
			</s:Rect>
			<s:CheckBox id="enableField" change="onProjectEnableChange(event)"/>
			<s:Label id="labelField" paddingTop="2"/>
			<s:Spacer width="100%"/>
			<s:Button label="+"/>
		</s:HGroup>
		
		<!--- replace rules -->
		<s:DataGrid width="100%" id="ruleGrid" editable="true" gridItemEditorSessionSave="onRuleItemEditorSave(event)" sortChange="onRulesSortChange(event)">
			<s:columns>
				<s:ArrayList>
					<s:GridColumn width="50" dataField="enable" itemRenderer="com.webpluz.view.RuleEnableItemRenderer"></s:GridColumn>
					<s:GridColumn width="50" dataField="type" headerText="type"></s:GridColumn>
					<s:GridColumn dataField="pattern" headerText="pattern" itemEditor="com.webpluz.view.RuleTextInputItemEditor"></s:GridColumn>
					<s:GridColumn dataField="replace" headerText="replace" itemEditor="com.webpluz.view.RuleReplaceItemEditor"></s:GridColumn>
				</s:ArrayList>
			</s:columns>
		</s:DataGrid>
		
	</s:VGroup>
</s:MXTreeItemRenderer>
